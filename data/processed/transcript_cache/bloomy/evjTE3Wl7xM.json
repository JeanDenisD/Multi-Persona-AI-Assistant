{
  "video_id": "evjTE3Wl7xM",
  "video_url": "https://www.youtube.com/watch?v=evjTE3Wl7xM",
  "video_info": {
    "title": "How to use XLOOKUP in Excel (3 minutes)",
    "uploader": "ExplainHowToSimply",
    "channel": "ExplainHowToSimply",
    "duration": 140,
    "upload_date": "20210819",
    "view_count": 347,
    "description": "This video shows a simple example of the XLOOKUP function in Excel. The syntax of the xlookup function is very similar to the vlookup or hlookup function in Excel and straightforward to use. The xlookup is a bit more resistant to changes in the numbers of rows and columns.",
    "tags": [
      "Excel",
      "Excel sheet",
      "Excel formula",
      "Microsoft Excel",
      "Excel table",
      "Excel tutorial",
      "tutorial about Excel",
      "How to work with Excel",
      "Excel basics",
      "Microsoft Excel sheet",
      "Excel explain video",
      "Excel formula syntax",
      "basic Excel tutorial",
      "how to do Excel",
      "how to deal with Excel",
      "xlookup function",
      "XLOOKUP function",
      "usage of xlookup function in Excel",
      "arguments of xlookup function",
      "simple example of xlookup function",
      "xlookup explained clearly"
    ]
  },
  "personality": "bloomy",
  "domain": "finance_excel",
  "expertise_areas": [
    "bloomberg",
    "excel",
    "finance",
    "data analysis",
    "trading",
    "financial modeling"
  ],
  "language": "en",
  "text": " Hello everyone, in this short video I show you a really simple xLOOKUP function example. So here I have a simple table with names, IDs and scores and we want to search for Josh, his ID and score of Josh. For that we use the xLOOKUP function and in the xLOOKUP function we need to specify the lookup value which is Josh. Then we specify the lookup array, so in which column or where do we want to search for Josh, which is that one. And next is the return array, which information do we want to get, so we want the ID and score of Josh, so for that we just select both columns here. We don't need to specify any further argument and we just press enter, so we have the ID from Josh is 1 and the score of Josh is 32. The same thing can be done in the transposed table, exactly the same with the lookup function and here we want to also use the xLOOKUP function with the lookup value of Josh, with the lookup array which is now a row and also the return array which is the score, only the score. Without further arguments we also get here 32 and just to show you if we would change here to Mary which is another name from the list we get her score which is 36. Great this was a short example how to use xLOOKUP similar to vLOOKUP and hLOOKUP. Thanks a lot and have a nice day.",
  "segments": [
    {
      "id": 0,
      "seek": 0,
      "start": 0.0,
      "end": 10.96,
      "text": " Hello everyone, in this short video I show you a really simple xLOOKUP function example.",
      "tokens": [
        50364,
        2425,
        1518,
        11,
        294,
        341,
        2099,
        960,
        286,
        855,
        291,
        257,
        534,
        2199,
        2031,
        43,
        24213,
        22917,
        2445,
        1365,
        13,
        50912
      ],
      "temperature": 0.0,
      "avg_logprob": -0.20634428092411586,
      "compression_ratio": 1.3533333333333333,
      "no_speech_prob": 0.09554030746221542
    },
    {
      "id": 1,
      "seek": 0,
      "start": 10.96,
      "end": 19.72,
      "text": " So here I have a simple table with names, IDs and scores and we want to search for Josh,",
      "tokens": [
        50912,
        407,
        510,
        286,
        362,
        257,
        2199,
        3199,
        365,
        5288,
        11,
        48212,
        293,
        13444,
        293,
        321,
        528,
        281,
        3164,
        337,
        9785,
        11,
        51350
      ],
      "temperature": 0.0,
      "avg_logprob": -0.20634428092411586,
      "compression_ratio": 1.3533333333333333,
      "no_speech_prob": 0.09554030746221542
    },
    {
      "id": 2,
      "seek": 0,
      "start": 19.72,
      "end": 22.68,
      "text": " his ID and score of Josh.",
      "tokens": [
        51350,
        702,
        7348,
        293,
        6175,
        295,
        9785,
        13,
        51498
      ],
      "temperature": 0.0,
      "avg_logprob": -0.20634428092411586,
      "compression_ratio": 1.3533333333333333,
      "no_speech_prob": 0.09554030746221542
    },
    {
      "id": 3,
      "seek": 2268,
      "start": 22.68,
      "end": 30.84,
      "text": " For that we use the xLOOKUP function and in the xLOOKUP function we need to specify",
      "tokens": [
        50364,
        1171,
        300,
        321,
        764,
        264,
        2031,
        43,
        24213,
        22917,
        2445,
        293,
        294,
        264,
        2031,
        43,
        24213,
        22917,
        2445,
        321,
        643,
        281,
        16500,
        50772
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16511353293618003,
      "compression_ratio": 1.75,
      "no_speech_prob": 0.3515769839286804
    },
    {
      "id": 4,
      "seek": 2268,
      "start": 30.84,
      "end": 34.04,
      "text": " the lookup value which is Josh.",
      "tokens": [
        50772,
        264,
        574,
        1010,
        2158,
        597,
        307,
        9785,
        13,
        50932
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16511353293618003,
      "compression_ratio": 1.75,
      "no_speech_prob": 0.3515769839286804
    },
    {
      "id": 5,
      "seek": 2268,
      "start": 34.04,
      "end": 43.44,
      "text": " Then we specify the lookup array, so in which column or where do we want to search for Josh,",
      "tokens": [
        50932,
        1396,
        321,
        16500,
        264,
        574,
        1010,
        10225,
        11,
        370,
        294,
        597,
        7738,
        420,
        689,
        360,
        321,
        528,
        281,
        3164,
        337,
        9785,
        11,
        51402
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16511353293618003,
      "compression_ratio": 1.75,
      "no_speech_prob": 0.3515769839286804
    },
    {
      "id": 6,
      "seek": 2268,
      "start": 43.44,
      "end": 45.28,
      "text": " which is that one.",
      "tokens": [
        51402,
        597,
        307,
        300,
        472,
        13,
        51494
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16511353293618003,
      "compression_ratio": 1.75,
      "no_speech_prob": 0.3515769839286804
    },
    {
      "id": 7,
      "seek": 2268,
      "start": 45.28,
      "end": 52.16,
      "text": " And next is the return array, which information do we want to get, so we want the ID and score",
      "tokens": [
        51494,
        400,
        958,
        307,
        264,
        2736,
        10225,
        11,
        597,
        1589,
        360,
        321,
        528,
        281,
        483,
        11,
        370,
        321,
        528,
        264,
        7348,
        293,
        6175,
        51838
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16511353293618003,
      "compression_ratio": 1.75,
      "no_speech_prob": 0.3515769839286804
    },
    {
      "id": 8,
      "seek": 5216,
      "start": 52.16,
      "end": 58.12,
      "text": " of Josh, so for that we just select both columns here.",
      "tokens": [
        50364,
        295,
        9785,
        11,
        370,
        337,
        300,
        321,
        445,
        3048,
        1293,
        13766,
        510,
        13,
        50662
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16381249337826134,
      "compression_ratio": 1.385185185185185,
      "no_speech_prob": 0.007947196252644062
    },
    {
      "id": 9,
      "seek": 5216,
      "start": 58.12,
      "end": 65.6,
      "text": " We don't need to specify any further argument and we just press enter, so we have the ID",
      "tokens": [
        50662,
        492,
        500,
        380,
        643,
        281,
        16500,
        604,
        3052,
        6770,
        293,
        321,
        445,
        1886,
        3242,
        11,
        370,
        321,
        362,
        264,
        7348,
        51036
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16381249337826134,
      "compression_ratio": 1.385185185185185,
      "no_speech_prob": 0.007947196252644062
    },
    {
      "id": 10,
      "seek": 5216,
      "start": 65.6,
      "end": 71.56,
      "text": " from Josh is 1 and the score of Josh is 32.",
      "tokens": [
        51036,
        490,
        9785,
        307,
        502,
        293,
        264,
        6175,
        295,
        9785,
        307,
        8858,
        13,
        51334
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16381249337826134,
      "compression_ratio": 1.385185185185185,
      "no_speech_prob": 0.007947196252644062
    },
    {
      "id": 11,
      "seek": 7156,
      "start": 71.56,
      "end": 82.92,
      "text": " The same thing can be done in the transposed table, exactly the same with the lookup function",
      "tokens": [
        50364,
        440,
        912,
        551,
        393,
        312,
        1096,
        294,
        264,
        7132,
        1744,
        3199,
        11,
        2293,
        264,
        912,
        365,
        264,
        574,
        1010,
        2445,
        50932
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09844640657013538,
      "compression_ratio": 1.507936507936508,
      "no_speech_prob": 0.011244392953813076
    },
    {
      "id": 12,
      "seek": 7156,
      "start": 82.92,
      "end": 97.16,
      "text": " and here we want to also use the xLOOKUP function with the lookup value of Josh, with the lookup",
      "tokens": [
        50932,
        293,
        510,
        321,
        528,
        281,
        611,
        764,
        264,
        2031,
        43,
        24213,
        22917,
        2445,
        365,
        264,
        574,
        1010,
        2158,
        295,
        9785,
        11,
        365,
        264,
        574,
        1010,
        51644
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09844640657013538,
      "compression_ratio": 1.507936507936508,
      "no_speech_prob": 0.011244392953813076
    },
    {
      "id": 13,
      "seek": 9716,
      "start": 97.16,
      "end": 110.39999999999999,
      "text": " array which is now a row and also the return array which is the score, only the score.",
      "tokens": [
        50364,
        10225,
        597,
        307,
        586,
        257,
        5386,
        293,
        611,
        264,
        2736,
        10225,
        597,
        307,
        264,
        6175,
        11,
        787,
        264,
        6175,
        13,
        51026
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1559384035509686,
      "compression_ratio": 1.4576271186440677,
      "no_speech_prob": 0.7630330920219421
    },
    {
      "id": 14,
      "seek": 9716,
      "start": 110.39999999999999,
      "end": 117.6,
      "text": " Without further arguments we also get here 32 and just to show you if we would change",
      "tokens": [
        51026,
        9129,
        3052,
        12869,
        321,
        611,
        483,
        510,
        8858,
        293,
        445,
        281,
        855,
        291,
        498,
        321,
        576,
        1319,
        51386
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1559384035509686,
      "compression_ratio": 1.4576271186440677,
      "no_speech_prob": 0.7630330920219421
    },
    {
      "id": 15,
      "seek": 11760,
      "start": 117.6,
      "end": 127.16,
      "text": " here to Mary which is another name from the list we get her score which is 36.",
      "tokens": [
        50364,
        510,
        281,
        6059,
        597,
        307,
        1071,
        1315,
        490,
        264,
        1329,
        321,
        483,
        720,
        6175,
        597,
        307,
        8652,
        13,
        50842
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2388174574253923,
      "compression_ratio": 1.3661971830985915,
      "no_speech_prob": 0.38100776076316833
    },
    {
      "id": 16,
      "seek": 11760,
      "start": 127.16,
      "end": 137.2,
      "text": " Great this was a short example how to use xLOOKUP similar to vLOOKUP and hLOOKUP.",
      "tokens": [
        50842,
        3769,
        341,
        390,
        257,
        2099,
        1365,
        577,
        281,
        764,
        2031,
        43,
        24213,
        22917,
        2531,
        281,
        371,
        43,
        24213,
        22917,
        293,
        276,
        43,
        24213,
        22917,
        13,
        51344
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2388174574253923,
      "compression_ratio": 1.3661971830985915,
      "no_speech_prob": 0.38100776076316833
    },
    {
      "id": 17,
      "seek": 11760,
      "start": 137.2,
      "end": 139.76,
      "text": " Thanks a lot and have a nice day.",
      "tokens": [
        51344,
        2561,
        257,
        688,
        293,
        362,
        257,
        1481,
        786,
        13,
        51472
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2388174574253923,
      "compression_ratio": 1.3661971830985915,
      "no_speech_prob": 0.38100776076316833
    }
  ],
  "processing_metadata": {
    "processed_at": "2025-06-26T02:27:10.186949",
    "whisper_model": "small",
    "personality_detected": "bloomy",
    "domain_focus": "finance_excel"
  },
  "source_metadata": {
    "url": "https://www.youtube.com/watch?v=evjTE3Wl7xM",
    "title": "Bloomberg News and Research",
    "category": "Bloomberg Terminal",
    "difficulty": "beginner",
    "key_topics": [
      "Bloomberg",
      "news",
      "research",
      "information"
    ],
    "priority": "medium"
  }
}