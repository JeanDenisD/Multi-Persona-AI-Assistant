{
  "video_id": "vGD4STHHFWA",
  "video_url": "https://www.youtube.com/watch?v=vGD4STHHFWA",
  "video_info": {
    "title": "How to use VLOOKUP in Excel (2 minutes)",
    "uploader": "ExplainHowToSimply",
    "channel": "ExplainHowToSimply",
    "duration": 113,
    "upload_date": "20210819",
    "view_count": 218,
    "description": "This video shows a simple example of the VLOOKUP function in Excel. The vlookup formula works similar to the hlookup and xlookup function in Excel. If you know the arguments of the Excel function, it's very simple to use.",
    "tags": [
      "Excel",
      "Excel sheet",
      "Excel formula",
      "Microsoft Excel",
      "Excel table",
      "Excel tutorial",
      "tutorial about Excel",
      "How to work with Excel",
      "Excel basics",
      "Microsoft Excel sheet",
      "Excel explain video",
      "Excel formula syntax",
      "basic Excel tutorial",
      "how to do Excel",
      "how to deal with Excel",
      "vlookup function",
      "VLOOKUP function",
      "HLOOKUP function",
      "hlookup function",
      "usage of vlookup function in Excel",
      "arguments of Vlookup function",
      "simple example of vlookup function",
      "vlookup explained clearly"
    ]
  },
  "personality": "bloomy",
  "domain": "finance_excel",
  "expertise_areas": [
    "bloomberg",
    "excel",
    "finance",
    "data analysis",
    "trading",
    "financial modeling"
  ],
  "language": "en",
  "text": " Hello everyone to this short tutorial how we make a VLOOKUP function. Okay, here I have a table consisting of names, their IDs and scores. And now the idea here behind this function is when we search for a specific name, for example Tom, we want to get his score which is 53. So now to create this function we just make an equal VLOOKUP. Then we put here the lookup value which is Tom, we are searching for Tom. Then we put the whole table there, so we want to look up this name in this table and now we specify the column index number we want to get. So we want to get the score, this column here, this is why we type 3 or see 3 in here and the last parameter is to define if we want an exact match then we type false or 0 or if we want an approximate match then we just type true or 1. So when we close the brackets here and type enter, so voila we have here 53 which is the score of Tom. Now when we search for Josh for example we get his score 32. Great, thanks a lot and have a nice day.",
  "segments": [
    {
      "id": 0,
      "seek": 0,
      "start": 0.0,
      "end": 9.92,
      "text": " Hello everyone to this short tutorial how we make a VLOOKUP function.",
      "tokens": [
        50364,
        2425,
        1518,
        281,
        341,
        2099,
        7073,
        577,
        321,
        652,
        257,
        691,
        43,
        24213,
        22917,
        2445,
        13,
        50860
      ],
      "temperature": 0.0,
      "avg_logprob": -0.24515114159419618,
      "compression_ratio": 1.3742331288343559,
      "no_speech_prob": 0.17256000638008118
    },
    {
      "id": 1,
      "seek": 0,
      "start": 9.92,
      "end": 18.92,
      "text": " Okay, here I have a table consisting of names, their IDs and scores.",
      "tokens": [
        50860,
        1033,
        11,
        510,
        286,
        362,
        257,
        3199,
        33921,
        295,
        5288,
        11,
        641,
        48212,
        293,
        13444,
        13,
        51310
      ],
      "temperature": 0.0,
      "avg_logprob": -0.24515114159419618,
      "compression_ratio": 1.3742331288343559,
      "no_speech_prob": 0.17256000638008118
    },
    {
      "id": 2,
      "seek": 0,
      "start": 18.92,
      "end": 26.28,
      "text": " And now the idea here behind this function is when we search for a specific name, for",
      "tokens": [
        51310,
        400,
        586,
        264,
        1558,
        510,
        2261,
        341,
        2445,
        307,
        562,
        321,
        3164,
        337,
        257,
        2685,
        1315,
        11,
        337,
        51678
      ],
      "temperature": 0.0,
      "avg_logprob": -0.24515114159419618,
      "compression_ratio": 1.3742331288343559,
      "no_speech_prob": 0.17256000638008118
    },
    {
      "id": 3,
      "seek": 2628,
      "start": 26.28,
      "end": 33.92,
      "text": " example Tom, we want to get his score which is 53.",
      "tokens": [
        50364,
        1365,
        5041,
        11,
        321,
        528,
        281,
        483,
        702,
        6175,
        597,
        307,
        21860,
        13,
        50746
      ],
      "temperature": 0.0,
      "avg_logprob": -0.23421693281693892,
      "compression_ratio": 1.3191489361702127,
      "no_speech_prob": 0.03617193549871445
    },
    {
      "id": 4,
      "seek": 2628,
      "start": 33.92,
      "end": 41.28,
      "text": " So now to create this function we just make an equal VLOOKUP.",
      "tokens": [
        50746,
        407,
        586,
        281,
        1884,
        341,
        2445,
        321,
        445,
        652,
        364,
        2681,
        691,
        43,
        24213,
        22917,
        13,
        51114
      ],
      "temperature": 0.0,
      "avg_logprob": -0.23421693281693892,
      "compression_ratio": 1.3191489361702127,
      "no_speech_prob": 0.03617193549871445
    },
    {
      "id": 5,
      "seek": 2628,
      "start": 41.28,
      "end": 48.88,
      "text": " Then we put here the lookup value which is Tom, we are searching for Tom.",
      "tokens": [
        51114,
        1396,
        321,
        829,
        510,
        264,
        574,
        1010,
        2158,
        597,
        307,
        5041,
        11,
        321,
        366,
        10808,
        337,
        5041,
        13,
        51494
      ],
      "temperature": 0.0,
      "avg_logprob": -0.23421693281693892,
      "compression_ratio": 1.3191489361702127,
      "no_speech_prob": 0.03617193549871445
    },
    {
      "id": 6,
      "seek": 4888,
      "start": 48.88,
      "end": 58.400000000000006,
      "text": " Then we put the whole table there, so we want to look up this name in this table and now",
      "tokens": [
        50364,
        1396,
        321,
        829,
        264,
        1379,
        3199,
        456,
        11,
        370,
        321,
        528,
        281,
        574,
        493,
        341,
        1315,
        294,
        341,
        3199,
        293,
        586,
        50840
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17083846032619476,
      "compression_ratio": 1.624113475177305,
      "no_speech_prob": 0.08544650673866272
    },
    {
      "id": 7,
      "seek": 4888,
      "start": 58.400000000000006,
      "end": 63.92,
      "text": " we specify the column index number we want to get.",
      "tokens": [
        50840,
        321,
        16500,
        264,
        7738,
        8186,
        1230,
        321,
        528,
        281,
        483,
        13,
        51116
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17083846032619476,
      "compression_ratio": 1.624113475177305,
      "no_speech_prob": 0.08544650673866272
    },
    {
      "id": 8,
      "seek": 4888,
      "start": 63.92,
      "end": 72.04,
      "text": " So we want to get the score, this column here, this is why we type 3 or see 3 in here and",
      "tokens": [
        51116,
        407,
        321,
        528,
        281,
        483,
        264,
        6175,
        11,
        341,
        7738,
        510,
        11,
        341,
        307,
        983,
        321,
        2010,
        805,
        420,
        536,
        805,
        294,
        510,
        293,
        51522
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17083846032619476,
      "compression_ratio": 1.624113475177305,
      "no_speech_prob": 0.08544650673866272
    },
    {
      "id": 9,
      "seek": 7204,
      "start": 72.04,
      "end": 83.4,
      "text": " the last parameter is to define if we want an exact match then we type false or 0 or",
      "tokens": [
        50364,
        264,
        1036,
        13075,
        307,
        281,
        6964,
        498,
        321,
        528,
        364,
        1900,
        2995,
        550,
        321,
        2010,
        7908,
        420,
        1958,
        420,
        50932
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13947905355425022,
      "compression_ratio": 1.559748427672956,
      "no_speech_prob": 0.012924802489578724
    },
    {
      "id": 10,
      "seek": 7204,
      "start": 83.4,
      "end": 89.12,
      "text": " if we want an approximate match then we just type true or 1.",
      "tokens": [
        50932,
        498,
        321,
        528,
        364,
        30874,
        2995,
        550,
        321,
        445,
        2010,
        2074,
        420,
        502,
        13,
        51218
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13947905355425022,
      "compression_ratio": 1.559748427672956,
      "no_speech_prob": 0.012924802489578724
    },
    {
      "id": 11,
      "seek": 7204,
      "start": 89.12,
      "end": 97.64000000000001,
      "text": " So when we close the brackets here and type enter, so voila we have here 53 which is the",
      "tokens": [
        51218,
        407,
        562,
        321,
        1998,
        264,
        26179,
        510,
        293,
        2010,
        3242,
        11,
        370,
        45565,
        321,
        362,
        510,
        21860,
        597,
        307,
        264,
        51644
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13947905355425022,
      "compression_ratio": 1.559748427672956,
      "no_speech_prob": 0.012924802489578724
    },
    {
      "id": 12,
      "seek": 7204,
      "start": 97.64000000000001,
      "end": 99.68,
      "text": " score of Tom.",
      "tokens": [
        51644,
        6175,
        295,
        5041,
        13,
        51746
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13947905355425022,
      "compression_ratio": 1.559748427672956,
      "no_speech_prob": 0.012924802489578724
    },
    {
      "id": 13,
      "seek": 9968,
      "start": 99.68,
      "end": 107.76,
      "text": " Now when we search for Josh for example we get his score 32.",
      "tokens": [
        50364,
        823,
        562,
        321,
        3164,
        337,
        9785,
        337,
        1365,
        321,
        483,
        702,
        6175,
        8858,
        13,
        50768
      ],
      "temperature": 0.0,
      "avg_logprob": -0.36179399490356445,
      "compression_ratio": 1.10989010989011,
      "no_speech_prob": 0.15010708570480347
    },
    {
      "id": 14,
      "seek": 9968,
      "start": 107.76,
      "end": 112.12,
      "text": " Great, thanks a lot and have a nice day.",
      "tokens": [
        50768,
        3769,
        11,
        3231,
        257,
        688,
        293,
        362,
        257,
        1481,
        786,
        13,
        50986
      ],
      "temperature": 0.0,
      "avg_logprob": -0.36179399490356445,
      "compression_ratio": 1.10989010989011,
      "no_speech_prob": 0.15010708570480347
    }
  ],
  "processing_metadata": {
    "processed_at": "2025-06-26T02:25:36.868415",
    "whisper_model": "small",
    "personality_detected": "bloomy",
    "domain_focus": "finance_excel"
  },
  "source_metadata": {
    "url": "https://www.youtube.com/watch?v=vGD4STHHFWA",
    "title": "Portfolio Analysis Tools",
    "category": "Financial Analysis",
    "difficulty": "intermediate",
    "key_topics": [
      "portfolio",
      "analysis",
      "Bloomberg",
      "risk"
    ],
    "priority": "high"
  }
}