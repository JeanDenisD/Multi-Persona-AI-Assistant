{
  "video_id": "2hd7jq2YNbg",
  "video_url": "https://www.youtube.com/watch?v=2hd7jq2YNbg",
  "video_info": {
    "title": "How to use the Bloomberg Data History (BDH) function in Excel (2 minutes)",
    "uploader": "ExplainHowToSimply",
    "channel": "ExplainHowToSimply",
    "duration": 94,
    "upload_date": "20210905",
    "view_count": 8134,
    "description": "This short tutorial explains how to simply use the Bloomberg Data History (BDH) function in Excel to retrieve and download financial data from the Bloomberg Terminal directly in Excel. If you know how to deal with the Bloomberg function, it is straightforward to get your financial data.\n\nIf you enjoyed the video, want to learn more about the Bloomberg Terminal, and would like to support my channel, I created Bloomberg Terminal Beginner's Guide e-book: https://explainhowtosimply.gumroad.com/l/BloombergTerminalBeginnersGuide",
    "tags": [
      "Bloomberg Tutorial",
      "Excel Bloomberg Add-in",
      "Bloomberg Terminal",
      "Historical Financial Data",
      "short financial data tutorial",
      "Bloomberg in Excel",
      "Historical stock last prices",
      "Bloomberg time series data download",
      "download financial data from Bloomberg",
      "Excel spreadsheet with financial stock price data",
      "Historical stock price data",
      "Short tutorial on Bloomberg",
      "Thesis in Finance",
      "Quantitative Research in Finance",
      "Bloomberg financial data",
      "Bloomberg Data History function",
      "BDH function"
    ]
  },
  "personality": "bloomy",
  "domain": "finance_excel",
  "expertise_areas": [
    "bloomberg",
    "excel",
    "finance",
    "data analysis",
    "trading",
    "financial modeling"
  ],
  "language": "en",
  "text": " Hello everyone, in this short video I explain how to simply use the Bloomberg data history function in Excel. For that you need to be locked into the Bloomberg terminal and installed the Bloomberg add-in. The Bloomberg data history function uses four arguments, it's the security, the field you are interested, the start date and the end date and it gives you the historical data series for a selected security. So here I have a simple example, I want to get the last price of each day of the Apple stock for the month August. So let's see how we need to define the Bloomberg data history function. For that we just type in Bloomberg data history with the specified security with the last price which is the field, the start date and the end date. And now we just press enter and here we already have the table of all the trading days and the last prices of each trading day during that month. If you liked the video please subscribe for more content and see you next time.",
  "segments": [
    {
      "id": 0,
      "seek": 0,
      "start": 0.0,
      "end": 10.040000000000001,
      "text": " Hello everyone, in this short video I explain how to simply use the Bloomberg data history",
      "tokens": [
        50364,
        2425,
        1518,
        11,
        294,
        341,
        2099,
        960,
        286,
        2903,
        577,
        281,
        2935,
        764,
        264,
        40363,
        1412,
        2503,
        50866
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17842072159496705,
      "compression_ratio": 1.6424581005586592,
      "no_speech_prob": 0.05736561864614487
    },
    {
      "id": 1,
      "seek": 0,
      "start": 10.040000000000001,
      "end": 12.24,
      "text": " function in Excel.",
      "tokens": [
        50866,
        2445,
        294,
        19060,
        13,
        50976
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17842072159496705,
      "compression_ratio": 1.6424581005586592,
      "no_speech_prob": 0.05736561864614487
    },
    {
      "id": 2,
      "seek": 0,
      "start": 12.24,
      "end": 19.080000000000002,
      "text": " For that you need to be locked into the Bloomberg terminal and installed the Bloomberg add-in.",
      "tokens": [
        50976,
        1171,
        300,
        291,
        643,
        281,
        312,
        9376,
        666,
        264,
        40363,
        14709,
        293,
        8899,
        264,
        40363,
        909,
        12,
        259,
        13,
        51318
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17842072159496705,
      "compression_ratio": 1.6424581005586592,
      "no_speech_prob": 0.05736561864614487
    },
    {
      "id": 3,
      "seek": 0,
      "start": 19.080000000000002,
      "end": 26.68,
      "text": " The Bloomberg data history function uses four arguments, it's the security, the field you",
      "tokens": [
        51318,
        440,
        40363,
        1412,
        2503,
        2445,
        4960,
        1451,
        12869,
        11,
        309,
        311,
        264,
        3825,
        11,
        264,
        2519,
        291,
        51698
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17842072159496705,
      "compression_ratio": 1.6424581005586592,
      "no_speech_prob": 0.05736561864614487
    },
    {
      "id": 4,
      "seek": 2668,
      "start": 26.68,
      "end": 33.44,
      "text": " are interested, the start date and the end date and it gives you the historical data",
      "tokens": [
        50364,
        366,
        3102,
        11,
        264,
        722,
        4002,
        293,
        264,
        917,
        4002,
        293,
        309,
        2709,
        291,
        264,
        8584,
        1412,
        50702
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11998415612555169,
      "compression_ratio": 1.5459183673469388,
      "no_speech_prob": 0.10551854223012924
    },
    {
      "id": 5,
      "seek": 2668,
      "start": 33.44,
      "end": 37.32,
      "text": " series for a selected security.",
      "tokens": [
        50702,
        2638,
        337,
        257,
        8209,
        3825,
        13,
        50896
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11998415612555169,
      "compression_ratio": 1.5459183673469388,
      "no_speech_prob": 0.10551854223012924
    },
    {
      "id": 6,
      "seek": 2668,
      "start": 37.32,
      "end": 44.239999999999995,
      "text": " So here I have a simple example, I want to get the last price of each day of the Apple",
      "tokens": [
        50896,
        407,
        510,
        286,
        362,
        257,
        2199,
        1365,
        11,
        286,
        528,
        281,
        483,
        264,
        1036,
        3218,
        295,
        1184,
        786,
        295,
        264,
        6373,
        51242
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11998415612555169,
      "compression_ratio": 1.5459183673469388,
      "no_speech_prob": 0.10551854223012924
    },
    {
      "id": 7,
      "seek": 2668,
      "start": 44.239999999999995,
      "end": 47.28,
      "text": " stock for the month August.",
      "tokens": [
        51242,
        4127,
        337,
        264,
        1618,
        6897,
        13,
        51394
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11998415612555169,
      "compression_ratio": 1.5459183673469388,
      "no_speech_prob": 0.10551854223012924
    },
    {
      "id": 8,
      "seek": 2668,
      "start": 47.28,
      "end": 53.8,
      "text": " So let's see how we need to define the Bloomberg data history function.",
      "tokens": [
        51394,
        407,
        718,
        311,
        536,
        577,
        321,
        643,
        281,
        6964,
        264,
        40363,
        1412,
        2503,
        2445,
        13,
        51720
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11998415612555169,
      "compression_ratio": 1.5459183673469388,
      "no_speech_prob": 0.10551854223012924
    },
    {
      "id": 9,
      "seek": 5380,
      "start": 53.8,
      "end": 64.96,
      "text": " For that we just type in Bloomberg data history with the specified security with the last",
      "tokens": [
        50364,
        1171,
        300,
        321,
        445,
        2010,
        294,
        40363,
        1412,
        2503,
        365,
        264,
        22206,
        3825,
        365,
        264,
        1036,
        50922
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13325837620517664,
      "compression_ratio": 1.5419354838709678,
      "no_speech_prob": 0.011796951293945312
    },
    {
      "id": 10,
      "seek": 5380,
      "start": 64.96,
      "end": 71.75999999999999,
      "text": " price which is the field, the start date and the end date.",
      "tokens": [
        50922,
        3218,
        597,
        307,
        264,
        2519,
        11,
        264,
        722,
        4002,
        293,
        264,
        917,
        4002,
        13,
        51262
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13325837620517664,
      "compression_ratio": 1.5419354838709678,
      "no_speech_prob": 0.011796951293945312
    },
    {
      "id": 11,
      "seek": 5380,
      "start": 71.75999999999999,
      "end": 81.08,
      "text": " And now we just press enter and here we already have the table of all the trading days and",
      "tokens": [
        51262,
        400,
        586,
        321,
        445,
        1886,
        3242,
        293,
        510,
        321,
        1217,
        362,
        264,
        3199,
        295,
        439,
        264,
        9529,
        1708,
        293,
        51728
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13325837620517664,
      "compression_ratio": 1.5419354838709678,
      "no_speech_prob": 0.011796951293945312
    },
    {
      "id": 12,
      "seek": 8108,
      "start": 81.08,
      "end": 85.84,
      "text": " the last prices of each trading day during that month.",
      "tokens": [
        50364,
        264,
        1036,
        7901,
        295,
        1184,
        9529,
        786,
        1830,
        300,
        1618,
        13,
        50602
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18581171333789825,
      "compression_ratio": 1.2641509433962264,
      "no_speech_prob": 0.37795478105545044
    },
    {
      "id": 13,
      "seek": 8108,
      "start": 85.84,
      "end": 91.2,
      "text": " If you liked the video please subscribe for more content and see you next time.",
      "tokens": [
        50602,
        759,
        291,
        4501,
        264,
        960,
        1767,
        3022,
        337,
        544,
        2701,
        293,
        536,
        291,
        958,
        565,
        13,
        50870
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18581171333789825,
      "compression_ratio": 1.2641509433962264,
      "no_speech_prob": 0.37795478105545044
    }
  ],
  "processing_metadata": {
    "processed_at": "2025-06-26T02:41:41.625772",
    "whisper_model": "small",
    "personality_detected": "bloomy",
    "domain_focus": "finance_excel"
  },
  "source_metadata": {
    "url": "https://www.youtube.com/watch?v=2hd7jq2YNbg",
    "title": "Excel Solver Tutorial",
    "category": "Excel Advanced",
    "difficulty": "advanced",
    "key_topics": [
      "Excel",
      "Solver",
      "optimization",
      "constraints"
    ],
    "priority": "medium"
  }
}