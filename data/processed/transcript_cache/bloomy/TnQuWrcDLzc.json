{
  "video_id": "TnQuWrcDLzc",
  "video_url": "https://www.youtube.com/watch?v=TnQuWrcDLzc",
  "video_info": {
    "title": "Historical constituents matrix of equity index with Python Jupiter Notebook from Bloomberg Terminal",
    "uploader": "ExplainHowToSimply",
    "channel": "ExplainHowToSimply",
    "duration": 1901,
    "upload_date": "20231030",
    "view_count": 265,
    "description": "This detailed tutorial shows how you can get the historical index constituents matrix over time of an equity index with a Python Jupiter Notebook from the Bloomberg Terminal through Excel. In the video, I show you the step-by -step process to get the Dow Jones Industrial Average (DJIA) index constituents over time (2020-01-01 until 2022-12-31) from the Bloomberg Terminal. This process is especially important for time-series analysis which uses an index as a stock universe. Using only the current index constituents would only account for the current and successful companies over time and would lead to a survivorship bias. Therefore, for an analysis with an index as universe, you should always include all the companies which were at any point in time part of the index. The goal of the video is to show the coding to be able to get all these historical constituents over time and produce a historical constituents matrix with ones (company is part of the index at a specific point in time) and zeros (company is not part of the index at s specific point in time). I was using this methodology in my master thesis. \n\nIf you like the video and got value out of it, a like, comment or subscribing would help my channel to further provide insightful videos in the future! Thanks a lot and cheers :)",
    "tags": [
      "Bloomberg",
      "historical index constituents",
      "companies of index",
      "all historical companies of index",
      "equity index universe",
      "stock index changes",
      "index leavers",
      "index joiners",
      "index as universe",
      "historical time-series data analysis",
      "survivorship bias",
      "account for past index constituents",
      "historically in index",
      "Python script for Bloomberg",
      "Bloomberg Excel Python",
      "Python script for retrieving Bloomberg data",
      "load all index companies Bloomberg",
      "all companies in index",
      "get index changes"
    ]
  },
  "personality": "bloomy",
  "domain": "finance_excel",
  "expertise_areas": [
    "bloomberg",
    "excel",
    "finance",
    "data analysis",
    "trading",
    "financial modeling"
  ],
  "language": "en",
  "text": " Hello everyone, I hope you're all doing great. In this longer tutorial I want to discuss a very important topic for analyzing historical time series data of an index. Analyzing an index for the past x years implies that you want to know all the index constituents, in other words all the companies in the index, over an analyzed time period. If you retrieve the list of companies of an index, you only get the current number of companies which are part of the index at a specific point in time. For example, for the S&P 500 index, which is called SPX, within Bloomberg, you should get at each point in time the 500 leading US companies which are part of the index. Similarly, for the Dow Jones industrial average, which is the price-weighted average of blue chip stocks that are generally the leaders in their industry, you should get 30 companies in the index at each point in time. The thing is that the constituents of an index change over time based on the different stock price performance of the individual stocks. Therefore, you also need to account for companies which were historically in the index but not anymore today. For historical analysis, you therefore also need to account for companies which were historically in the index but not anymore today. If you don't do that, your historical analysis has a survivorship bias because you only take into account the successful companies with a positive performance over time which are currently still in the index. The challenge is to find out when a specific company was in the index and when not. Let me show what the outcome of this video is going to be. I will create a constituents matrix with ones if a specific company is part of the index and zeros if the company is not part of the index. It would look something like this. You have the dates as index either daily, monthly or yearly and for each company there is a column which indicates with a dummy variable if the company is active in the index indicated by a one or if the company is not in the index indicated with a zero. If you now check that on a specific date in time, for example the 15 January 2020, you can then look at all the constituents. You see here the sum is 30 and we have a count of 34. So over the specified period from beginning of 2020 to the end of 2022, we had 34 companies which were part of the index but at that specific point in time there are 30 companies in the index as it should be. As far as I know there is no convenient way to download such a historical security matrix directly with the Bloomberg terminal but there is a way to retrieve that information with the help of a python script. For that I use a Jupyter notebook on the Bloomberg terminal computer. In case you never used Python and Jupyter notebooks before, check out my other videos on Python for an introduction to that. Okay let's get started. As just discussed we want to download all the historical index constituents over time from Bloomberg through Python into an Excel sheet. So this is a cross-sectional time series data analysis within a specified index universe. Only considering current index constituents leads to a selection bias and therefore we need to account for all the historical index constituents over time. I will show that in an example with the Dow Jones industrial average which is called Indu index within Bloomberg and we want to get all the active constituents over a specified time period we want to include in our analysis. A first important note is that you have to be locked into the Bloomberg terminal to retrieve data through a python script and second the Bloomberg excel add-in is also required. So in the first step we are going to import the required packages. First of all we need pandas and numpy also the xls writer and the iter tools. Okay so we can run that. The next step is to define a function for the historical constituents. So we want to generate an excel file that gets information of the index constituents. So we define a function called gen constituents and as inputs we use start and frequency index and file name. So the start and the end specifies the time period of the data retrieval. The frequency defines the frequency of the analysis so either daily monthly or yearly the index specifies the index we want to use for example the s&p have hundred the spx the s&p 100 the oex or the Dow Jones industrial average in Bloomberg called Indu and then the file name this is just the name of the excel file to be generated. First of all we are going to create an offset variable to ensure no overlap when writing data to the excel sheet. Then we are going to create a pandas excel writer object using xls writer as the engine to write to the excel sheet. Then we are going to define the index header of the data series. So now we're going to write the index header to the excel sheet using the pandas writer starting at the specified location. So and then we update the offset of the next row of the writing the index header. Now we define a data frame for the dates within the specified time period and frequency. So and now we add an empty column to the data frame to create alternating columns. So so and now we create a list of column indices in alternating order. So and now we write the dates column to the excel sheet. So now we update the offset for the next data section. So now we generate date override strings in the form of year year year year month month day day. So so so now we add an empty column to create an alternating column. So now we create the list of column indices in alternating order. So now you write the date strings column to the excel sheet. So now we update the offset for the next data section. So now we generate the excel code to perform a bloomer query for the historical index data. So so in this command we use the bds bloomerc function to use the historical index market way of a specific company. Now we add an empty column to create alternating columns. So and now we create a list of column indices in alternating order again. So and now we write the excel code column to the excel sheet. So and now we close the pandas excel writer and save the excel file. And at the end we want to print a success message. So this is it for the first function so we can run that. And now the second function we want to define is the function for the historical constituents matrix which defines when is a certain asset active in the index with a 1 or inactive with a 0. Okay so we make a definition of the create history security matrix. So first we define our definition name and the inputs. So our file name is the excel file name where the historical constituents matrix will be stored and the source data sheet name is the name of the source excel sheet containing the historical constituents data which we just defined above. So now we read the data from the specified excel sheet and we skip the first rows. So next we remove the first rows which are just containing the column names or the headers. And now we extract the dates from the data frames column names. And now we extract the unique securities the assets from the data considering a 0 as a placeholder. Then we remove the placeholder 0 from the list of securities. And now we create an empty data frame to represent the historical security matrix. Here the columns represent the dates and the rows represent securities. So and now we populate the security matrix with 1 if a security is active on a particular date. We do that with two four loops. And now we append the security matrix to the existing excel file using the open py excel engine. So if it worked now we also want to print success. And now we run that oh I see here we need to define the brackets like that. And now we try to run that again. Now it seems to be correct. Okay and now we need to define the specific parameters for the function. So we want to define the start date. In my case I want to use a period of three years starting from 2020 until the end of 2022. And then we also need to specify the frequency. In my case I want to have a daily so a capital D. Then we also need to specify the index. In our case it's the Dow Jones industrial average index and in Bloomberg it's called Indu index. Then we specify our preferred file name. And we are going to call it Constituent Dow Jones industrial average daily. And we also need to specify our source data sheet name for the second function. Okay so we run that and now we can actually use our function with the specified parameters from the first function is the generate Constituents. And here we need the start and the frequency which index and the file name. Okay now we run that. Okay so we have an unexpected keyword argument date in this column here. I think this date is data with an A. So let's change that above here. We can run the function again and let's try if that works now. Okay so we have a success. You're also one C. More. Okay so now we have a success and what we actually want to do now is we need to open our Excel file with the Bloomberg Excel add-in and we want to wait for the download of the historical constituents in order to use the second function because here we need the input of the first sheet in the Excel. And now we first actually need to download the data now with this function and this only happens when we open the Excel and then the Bloomberg is going to load all the data in there. So as you can see here we use the Excel with the Bloomberg add-in. This is very important and now you can open your file. Okay so now we are opening our file and as you can see now Bloomberg is actually loading the data in there. So we just wait until every data point is loaded. This seems to be the case now and actually we need to save our file in order to download our second sheet with the constituents matrix with the zeros and the ones. So this was only the first step with the first function so we save and we close that Excel file again go back to our Jupyter Notebook and now we need to use our second defined function which was the create history security matrix. And here we need the file name and the source data sheet name. So let's try to run that. It's still running let's wait a bit more. Okay now we also have a success here. So for that we now also need to again open the Excel file to see what happens. So now we have this second sheet here the history security matrix which we just defined in the code and as you can see here we have in the first row we have our dates specified from the beginning of 2020 until the end of 2022 here and for every column as you can see we have here ones and we have zeros and now let's check if we have for a random date the 30 constituents in the index. So we have some 30 constituents and in total during those three years we have 34 constituents but four are not active at this specific point in time so we have here a zero here one here one and here one and those companies are at this specific point in time not in the index but you still need to account for them in your analysis if you want to use this historical data with this index universe. Okay and now in order to use that Excel in your case for your thesis for your paper whatever you need to also make sure that you copy and paste only the values of this Excel sheet because if you want to use this Excel with a computer that has not Bloomberg on it you might lose some data because here in this sheet you actually have Bloomberg functions and those are actually only running if you are on a computer that has Bloomberg so make sure to copy and paste the values in your sheets and with this index you can now further analyze your stock universe you have all the constituents from up here those are all the Bloomberg constituents and with that you can now start your analysis with the historical data on the specific index which was in our case the Dow Jones Industrial Average. If you are still watching the video I really appreciate a like and also a comment that helps a lot for my youtube channel so I hope you got a lot of value out of this tutorial I used this technique for my master of thesis and without this technique I wouldn't have done a historical data analysis so thanks for your comments your likes and also subscribe for more useful python and Bloomberg tutorials thanks a lot and see you next time",
  "segments": [
    {
      "id": 0,
      "seek": 0,
      "start": 0.0,
      "end": 4.08,
      "text": " Hello everyone, I hope you're all doing great. In this",
      "tokens": [
        50364,
        2425,
        1518,
        11,
        286,
        1454,
        291,
        434,
        439,
        884,
        869,
        13,
        682,
        341,
        50568
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09938729193902784,
      "compression_ratio": 1.7264573991031391,
      "no_speech_prob": 0.0032889069989323616
    },
    {
      "id": 1,
      "seek": 0,
      "start": 4.08,
      "end": 8.16,
      "text": " longer tutorial I want to discuss a very important topic",
      "tokens": [
        50568,
        2854,
        7073,
        286,
        528,
        281,
        2248,
        257,
        588,
        1021,
        4829,
        50772
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09938729193902784,
      "compression_ratio": 1.7264573991031391,
      "no_speech_prob": 0.0032889069989323616
    },
    {
      "id": 2,
      "seek": 0,
      "start": 8.16,
      "end": 12.08,
      "text": " for analyzing historical time series data of an index.",
      "tokens": [
        50772,
        337,
        23663,
        8584,
        565,
        2638,
        1412,
        295,
        364,
        8186,
        13,
        50968
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09938729193902784,
      "compression_ratio": 1.7264573991031391,
      "no_speech_prob": 0.0032889069989323616
    },
    {
      "id": 3,
      "seek": 0,
      "start": 12.08,
      "end": 18.0,
      "text": " Analyzing an index for the past x years implies that you want to know all the",
      "tokens": [
        50968,
        1107,
        5222,
        8781,
        364,
        8186,
        337,
        264,
        1791,
        2031,
        924,
        18779,
        300,
        291,
        528,
        281,
        458,
        439,
        264,
        51264
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09938729193902784,
      "compression_ratio": 1.7264573991031391,
      "no_speech_prob": 0.0032889069989323616
    },
    {
      "id": 4,
      "seek": 0,
      "start": 18.0,
      "end": 22.080000000000002,
      "text": " index constituents, in other words all the companies in the index,",
      "tokens": [
        51264,
        8186,
        30847,
        11,
        294,
        661,
        2283,
        439,
        264,
        3431,
        294,
        264,
        8186,
        11,
        51468
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09938729193902784,
      "compression_ratio": 1.7264573991031391,
      "no_speech_prob": 0.0032889069989323616
    },
    {
      "id": 5,
      "seek": 0,
      "start": 22.080000000000002,
      "end": 26.8,
      "text": " over an analyzed time period. If you retrieve the list of companies of an",
      "tokens": [
        51468,
        670,
        364,
        28181,
        565,
        2896,
        13,
        759,
        291,
        30254,
        264,
        1329,
        295,
        3431,
        295,
        364,
        51704
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09938729193902784,
      "compression_ratio": 1.7264573991031391,
      "no_speech_prob": 0.0032889069989323616
    },
    {
      "id": 6,
      "seek": 2680,
      "start": 26.8,
      "end": 33.120000000000005,
      "text": " index, you only get the current number of companies which are part of the index at a specific point",
      "tokens": [
        50364,
        8186,
        11,
        291,
        787,
        483,
        264,
        2190,
        1230,
        295,
        3431,
        597,
        366,
        644,
        295,
        264,
        8186,
        412,
        257,
        2685,
        935,
        50680
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17664480209350586,
      "compression_ratio": 1.6752136752136753,
      "no_speech_prob": 0.046037815511226654
    },
    {
      "id": 7,
      "seek": 2680,
      "start": 33.120000000000005,
      "end": 40.480000000000004,
      "text": " in time. For example, for the S&P 500 index, which is called SPX, within Bloomberg, you should get at",
      "tokens": [
        50680,
        294,
        565,
        13,
        1171,
        1365,
        11,
        337,
        264,
        318,
        5,
        47,
        5923,
        8186,
        11,
        597,
        307,
        1219,
        8420,
        55,
        11,
        1951,
        40363,
        11,
        291,
        820,
        483,
        412,
        51048
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17664480209350586,
      "compression_ratio": 1.6752136752136753,
      "no_speech_prob": 0.046037815511226654
    },
    {
      "id": 8,
      "seek": 2680,
      "start": 40.480000000000004,
      "end": 47.84,
      "text": " each point in time the 500 leading US companies which are part of the index. Similarly, for the",
      "tokens": [
        51048,
        1184,
        935,
        294,
        565,
        264,
        5923,
        5775,
        2546,
        3431,
        597,
        366,
        644,
        295,
        264,
        8186,
        13,
        13157,
        11,
        337,
        264,
        51416
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17664480209350586,
      "compression_ratio": 1.6752136752136753,
      "no_speech_prob": 0.046037815511226654
    },
    {
      "id": 9,
      "seek": 2680,
      "start": 47.84,
      "end": 53.84,
      "text": " Dow Jones industrial average, which is the price-weighted average of blue chip stocks that are",
      "tokens": [
        51416,
        20947,
        10512,
        9987,
        4274,
        11,
        597,
        307,
        264,
        3218,
        12,
        12329,
        292,
        4274,
        295,
        3344,
        11409,
        12966,
        300,
        366,
        51716
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17664480209350586,
      "compression_ratio": 1.6752136752136753,
      "no_speech_prob": 0.046037815511226654
    },
    {
      "id": 10,
      "seek": 5384,
      "start": 53.92,
      "end": 60.56,
      "text": " generally the leaders in their industry, you should get 30 companies in the index at each point",
      "tokens": [
        50368,
        5101,
        264,
        3523,
        294,
        641,
        3518,
        11,
        291,
        820,
        483,
        2217,
        3431,
        294,
        264,
        8186,
        412,
        1184,
        935,
        50700
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09598670182404695,
      "compression_ratio": 1.703056768558952,
      "no_speech_prob": 0.006688768044114113
    },
    {
      "id": 11,
      "seek": 5384,
      "start": 60.56,
      "end": 67.2,
      "text": " in time. The thing is that the constituents of an index change over time based on the different stock",
      "tokens": [
        50700,
        294,
        565,
        13,
        440,
        551,
        307,
        300,
        264,
        30847,
        295,
        364,
        8186,
        1319,
        670,
        565,
        2361,
        322,
        264,
        819,
        4127,
        51032
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09598670182404695,
      "compression_ratio": 1.703056768558952,
      "no_speech_prob": 0.006688768044114113
    },
    {
      "id": 12,
      "seek": 5384,
      "start": 67.2,
      "end": 73.60000000000001,
      "text": " price performance of the individual stocks. Therefore, you also need to account for companies",
      "tokens": [
        51032,
        3218,
        3389,
        295,
        264,
        2609,
        12966,
        13,
        7504,
        11,
        291,
        611,
        643,
        281,
        2696,
        337,
        3431,
        51352
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09598670182404695,
      "compression_ratio": 1.703056768558952,
      "no_speech_prob": 0.006688768044114113
    },
    {
      "id": 13,
      "seek": 5384,
      "start": 73.60000000000001,
      "end": 80.4,
      "text": " which were historically in the index but not anymore today. For historical analysis, you therefore",
      "tokens": [
        51352,
        597,
        645,
        16180,
        294,
        264,
        8186,
        457,
        406,
        3602,
        965,
        13,
        1171,
        8584,
        5215,
        11,
        291,
        4412,
        51692
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09598670182404695,
      "compression_ratio": 1.703056768558952,
      "no_speech_prob": 0.006688768044114113
    },
    {
      "id": 14,
      "seek": 8040,
      "start": 80.4,
      "end": 86.16000000000001,
      "text": " also need to account for companies which were historically in the index but not anymore today.",
      "tokens": [
        50364,
        611,
        643,
        281,
        2696,
        337,
        3431,
        597,
        645,
        16180,
        294,
        264,
        8186,
        457,
        406,
        3602,
        965,
        13,
        50652
      ],
      "temperature": 0.0,
      "avg_logprob": -0.054280840433560885,
      "compression_ratio": 1.7148014440433212,
      "no_speech_prob": 0.012572772800922394
    },
    {
      "id": 15,
      "seek": 8040,
      "start": 86.16000000000001,
      "end": 92.4,
      "text": " If you don't do that, your historical analysis has a survivorship bias because you only take",
      "tokens": [
        50652,
        759,
        291,
        500,
        380,
        360,
        300,
        11,
        428,
        8584,
        5215,
        575,
        257,
        12324,
        14752,
        12577,
        570,
        291,
        787,
        747,
        50964
      ],
      "temperature": 0.0,
      "avg_logprob": -0.054280840433560885,
      "compression_ratio": 1.7148014440433212,
      "no_speech_prob": 0.012572772800922394
    },
    {
      "id": 16,
      "seek": 8040,
      "start": 92.4,
      "end": 97.92,
      "text": " into account the successful companies with a positive performance over time which are currently",
      "tokens": [
        50964,
        666,
        2696,
        264,
        4406,
        3431,
        365,
        257,
        3353,
        3389,
        670,
        565,
        597,
        366,
        4362,
        51240
      ],
      "temperature": 0.0,
      "avg_logprob": -0.054280840433560885,
      "compression_ratio": 1.7148014440433212,
      "no_speech_prob": 0.012572772800922394
    },
    {
      "id": 17,
      "seek": 8040,
      "start": 97.92,
      "end": 104.16000000000001,
      "text": " still in the index. The challenge is to find out when a specific company was in the index and when",
      "tokens": [
        51240,
        920,
        294,
        264,
        8186,
        13,
        440,
        3430,
        307,
        281,
        915,
        484,
        562,
        257,
        2685,
        2237,
        390,
        294,
        264,
        8186,
        293,
        562,
        51552
      ],
      "temperature": 0.0,
      "avg_logprob": -0.054280840433560885,
      "compression_ratio": 1.7148014440433212,
      "no_speech_prob": 0.012572772800922394
    },
    {
      "id": 18,
      "seek": 8040,
      "start": 104.16000000000001,
      "end": 109.68,
      "text": " not. Let me show what the outcome of this video is going to be. I will create a constituents",
      "tokens": [
        51552,
        406,
        13,
        961,
        385,
        855,
        437,
        264,
        9700,
        295,
        341,
        960,
        307,
        516,
        281,
        312,
        13,
        286,
        486,
        1884,
        257,
        30847,
        51828
      ],
      "temperature": 0.0,
      "avg_logprob": -0.054280840433560885,
      "compression_ratio": 1.7148014440433212,
      "no_speech_prob": 0.012572772800922394
    },
    {
      "id": 19,
      "seek": 10968,
      "start": 109.68,
      "end": 116.64,
      "text": " matrix with ones if a specific company is part of the index and zeros if the company is not part of",
      "tokens": [
        50364,
        8141,
        365,
        2306,
        498,
        257,
        2685,
        2237,
        307,
        644,
        295,
        264,
        8186,
        293,
        35193,
        498,
        264,
        2237,
        307,
        406,
        644,
        295,
        50712
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09786142328734039,
      "compression_ratio": 1.941747572815534,
      "no_speech_prob": 0.05798788368701935
    },
    {
      "id": 20,
      "seek": 10968,
      "start": 116.64,
      "end": 123.84,
      "text": " the index. It would look something like this. You have the dates as index either daily, monthly or",
      "tokens": [
        50712,
        264,
        8186,
        13,
        467,
        576,
        574,
        746,
        411,
        341,
        13,
        509,
        362,
        264,
        11691,
        382,
        8186,
        2139,
        5212,
        11,
        12878,
        420,
        51072
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09786142328734039,
      "compression_ratio": 1.941747572815534,
      "no_speech_prob": 0.05798788368701935
    },
    {
      "id": 21,
      "seek": 10968,
      "start": 123.84,
      "end": 131.12,
      "text": " yearly and for each company there is a column which indicates with a dummy variable if the company is",
      "tokens": [
        51072,
        39102,
        293,
        337,
        1184,
        2237,
        456,
        307,
        257,
        7738,
        597,
        16203,
        365,
        257,
        35064,
        7006,
        498,
        264,
        2237,
        307,
        51436
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09786142328734039,
      "compression_ratio": 1.941747572815534,
      "no_speech_prob": 0.05798788368701935
    },
    {
      "id": 22,
      "seek": 10968,
      "start": 131.12,
      "end": 138.64000000000001,
      "text": " active in the index indicated by a one or if the company is not in the index indicated with a zero.",
      "tokens": [
        51436,
        4967,
        294,
        264,
        8186,
        16176,
        538,
        257,
        472,
        420,
        498,
        264,
        2237,
        307,
        406,
        294,
        264,
        8186,
        16176,
        365,
        257,
        4018,
        13,
        51812
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09786142328734039,
      "compression_ratio": 1.941747572815534,
      "no_speech_prob": 0.05798788368701935
    },
    {
      "id": 23,
      "seek": 13864,
      "start": 138.64,
      "end": 148.0,
      "text": " If you now check that on a specific date in time, for example the 15 January 2020, you can then look",
      "tokens": [
        50364,
        759,
        291,
        586,
        1520,
        300,
        322,
        257,
        2685,
        4002,
        294,
        565,
        11,
        337,
        1365,
        264,
        2119,
        7061,
        4808,
        11,
        291,
        393,
        550,
        574,
        50832
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1044228014193083,
      "compression_ratio": 1.5,
      "no_speech_prob": 0.0015070983208715916
    },
    {
      "id": 24,
      "seek": 13864,
      "start": 148.0,
      "end": 155.67999999999998,
      "text": " at all the constituents. You see here the sum is 30 and we have a count of 34. So over the specified",
      "tokens": [
        50832,
        412,
        439,
        264,
        30847,
        13,
        509,
        536,
        510,
        264,
        2408,
        307,
        2217,
        293,
        321,
        362,
        257,
        1207,
        295,
        12790,
        13,
        407,
        670,
        264,
        22206,
        51216
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1044228014193083,
      "compression_ratio": 1.5,
      "no_speech_prob": 0.0015070983208715916
    },
    {
      "id": 25,
      "seek": 13864,
      "start": 155.67999999999998,
      "end": 164.32,
      "text": " period from beginning of 2020 to the end of 2022, we had 34 companies which were part of the index",
      "tokens": [
        51216,
        2896,
        490,
        2863,
        295,
        4808,
        281,
        264,
        917,
        295,
        20229,
        11,
        321,
        632,
        12790,
        3431,
        597,
        645,
        644,
        295,
        264,
        8186,
        51648
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1044228014193083,
      "compression_ratio": 1.5,
      "no_speech_prob": 0.0015070983208715916
    },
    {
      "id": 26,
      "seek": 16432,
      "start": 164.4,
      "end": 170.56,
      "text": " but at that specific point in time there are 30 companies in the index as it should be. As far as",
      "tokens": [
        50368,
        457,
        412,
        300,
        2685,
        935,
        294,
        565,
        456,
        366,
        2217,
        3431,
        294,
        264,
        8186,
        382,
        309,
        820,
        312,
        13,
        1018,
        1400,
        382,
        50676
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10389261567190791,
      "compression_ratio": 1.6363636363636365,
      "no_speech_prob": 0.006864604540169239
    },
    {
      "id": 27,
      "seek": 16432,
      "start": 170.56,
      "end": 177.51999999999998,
      "text": " I know there is no convenient way to download such a historical security matrix directly with the",
      "tokens": [
        50676,
        286,
        458,
        456,
        307,
        572,
        10851,
        636,
        281,
        5484,
        1270,
        257,
        8584,
        3825,
        8141,
        3838,
        365,
        264,
        51024
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10389261567190791,
      "compression_ratio": 1.6363636363636365,
      "no_speech_prob": 0.006864604540169239
    },
    {
      "id": 28,
      "seek": 16432,
      "start": 177.51999999999998,
      "end": 183.84,
      "text": " Bloomberg terminal but there is a way to retrieve that information with the help of a python script.",
      "tokens": [
        51024,
        40363,
        14709,
        457,
        456,
        307,
        257,
        636,
        281,
        30254,
        300,
        1589,
        365,
        264,
        854,
        295,
        257,
        38797,
        5755,
        13,
        51340
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10389261567190791,
      "compression_ratio": 1.6363636363636365,
      "no_speech_prob": 0.006864604540169239
    },
    {
      "id": 29,
      "seek": 16432,
      "start": 183.84,
      "end": 190.48,
      "text": " For that I use a Jupyter notebook on the Bloomberg terminal computer. In case you never used Python",
      "tokens": [
        51340,
        1171,
        300,
        286,
        764,
        257,
        22125,
        88,
        391,
        21060,
        322,
        264,
        40363,
        14709,
        3820,
        13,
        682,
        1389,
        291,
        1128,
        1143,
        15329,
        51672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10389261567190791,
      "compression_ratio": 1.6363636363636365,
      "no_speech_prob": 0.006864604540169239
    },
    {
      "id": 30,
      "seek": 19048,
      "start": 190.48,
      "end": 196.39999999999998,
      "text": " and Jupyter notebooks before, check out my other videos on Python for an introduction to that.",
      "tokens": [
        50364,
        293,
        22125,
        88,
        391,
        43782,
        949,
        11,
        1520,
        484,
        452,
        661,
        2145,
        322,
        15329,
        337,
        364,
        9339,
        281,
        300,
        13,
        50660
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09479819274530178,
      "compression_ratio": 1.549800796812749,
      "no_speech_prob": 0.006944152992218733
    },
    {
      "id": 31,
      "seek": 19048,
      "start": 196.39999999999998,
      "end": 203.35999999999999,
      "text": " Okay let's get started. As just discussed we want to download all the historical index constituents",
      "tokens": [
        50660,
        1033,
        718,
        311,
        483,
        1409,
        13,
        1018,
        445,
        7152,
        321,
        528,
        281,
        5484,
        439,
        264,
        8584,
        8186,
        30847,
        51008
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09479819274530178,
      "compression_ratio": 1.549800796812749,
      "no_speech_prob": 0.006944152992218733
    },
    {
      "id": 32,
      "seek": 19048,
      "start": 203.35999999999999,
      "end": 209.28,
      "text": " over time from Bloomberg through Python into an Excel sheet. So this is a cross-sectional time",
      "tokens": [
        51008,
        670,
        565,
        490,
        40363,
        807,
        15329,
        666,
        364,
        19060,
        8193,
        13,
        407,
        341,
        307,
        257,
        3278,
        12,
        11963,
        304,
        565,
        51304
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09479819274530178,
      "compression_ratio": 1.549800796812749,
      "no_speech_prob": 0.006944152992218733
    },
    {
      "id": 33,
      "seek": 19048,
      "start": 209.28,
      "end": 217.2,
      "text": " series data analysis within a specified index universe. Only considering current index constituents",
      "tokens": [
        51304,
        2638,
        1412,
        5215,
        1951,
        257,
        22206,
        8186,
        6445,
        13,
        5686,
        8079,
        2190,
        8186,
        30847,
        51700
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09479819274530178,
      "compression_ratio": 1.549800796812749,
      "no_speech_prob": 0.006944152992218733
    },
    {
      "id": 34,
      "seek": 21720,
      "start": 217.2,
      "end": 224.23999999999998,
      "text": " leads to a selection bias and therefore we need to account for all the historical index constituents",
      "tokens": [
        50364,
        6689,
        281,
        257,
        9450,
        12577,
        293,
        4412,
        321,
        643,
        281,
        2696,
        337,
        439,
        264,
        8584,
        8186,
        30847,
        50716
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09490920796113855,
      "compression_ratio": 1.6694915254237288,
      "no_speech_prob": 0.002509265672415495
    },
    {
      "id": 35,
      "seek": 21720,
      "start": 224.23999999999998,
      "end": 230.07999999999998,
      "text": " over time. I will show that in an example with the Dow Jones industrial average which is called",
      "tokens": [
        50716,
        670,
        565,
        13,
        286,
        486,
        855,
        300,
        294,
        364,
        1365,
        365,
        264,
        20947,
        10512,
        9987,
        4274,
        597,
        307,
        1219,
        51008
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09490920796113855,
      "compression_ratio": 1.6694915254237288,
      "no_speech_prob": 0.002509265672415495
    },
    {
      "id": 36,
      "seek": 21720,
      "start": 230.07999999999998,
      "end": 236.64,
      "text": " Indu index within Bloomberg and we want to get all the active constituents over a specified time",
      "tokens": [
        51008,
        2333,
        84,
        8186,
        1951,
        40363,
        293,
        321,
        528,
        281,
        483,
        439,
        264,
        4967,
        30847,
        670,
        257,
        22206,
        565,
        51336
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09490920796113855,
      "compression_ratio": 1.6694915254237288,
      "no_speech_prob": 0.002509265672415495
    },
    {
      "id": 37,
      "seek": 21720,
      "start": 236.64,
      "end": 243.28,
      "text": " period we want to include in our analysis. A first important note is that you have to be locked into",
      "tokens": [
        51336,
        2896,
        321,
        528,
        281,
        4090,
        294,
        527,
        5215,
        13,
        316,
        700,
        1021,
        3637,
        307,
        300,
        291,
        362,
        281,
        312,
        9376,
        666,
        51668
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09490920796113855,
      "compression_ratio": 1.6694915254237288,
      "no_speech_prob": 0.002509265672415495
    },
    {
      "id": 38,
      "seek": 24328,
      "start": 243.28,
      "end": 249.76,
      "text": " the Bloomberg terminal to retrieve data through a python script and second the Bloomberg excel",
      "tokens": [
        50364,
        264,
        40363,
        14709,
        281,
        30254,
        1412,
        807,
        257,
        38797,
        5755,
        293,
        1150,
        264,
        40363,
        24015,
        50688
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16068119472927517,
      "compression_ratio": 1.543859649122807,
      "no_speech_prob": 0.013104868121445179
    },
    {
      "id": 39,
      "seek": 24328,
      "start": 249.76,
      "end": 256.4,
      "text": " add-in is also required. So in the first step we are going to import the required packages. First",
      "tokens": [
        50688,
        909,
        12,
        259,
        307,
        611,
        4739,
        13,
        407,
        294,
        264,
        700,
        1823,
        321,
        366,
        516,
        281,
        974,
        264,
        4739,
        17401,
        13,
        2386,
        51020
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16068119472927517,
      "compression_ratio": 1.543859649122807,
      "no_speech_prob": 0.013104868121445179
    },
    {
      "id": 40,
      "seek": 24328,
      "start": 256.4,
      "end": 270.4,
      "text": " of all we need pandas and numpy also the xls writer and the iter tools.",
      "tokens": [
        51020,
        295,
        439,
        321,
        643,
        4565,
        296,
        293,
        1031,
        8200,
        611,
        264,
        2031,
        11784,
        9936,
        293,
        264,
        17138,
        3873,
        13,
        51720
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16068119472927517,
      "compression_ratio": 1.543859649122807,
      "no_speech_prob": 0.013104868121445179
    },
    {
      "id": 41,
      "seek": 27328,
      "start": 274.23999999999995,
      "end": 287.28,
      "text": " Okay so we can run that. The next step is to define a function for the historical constituents.",
      "tokens": [
        50412,
        1033,
        370,
        321,
        393,
        1190,
        300,
        13,
        440,
        958,
        1823,
        307,
        281,
        6964,
        257,
        2445,
        337,
        264,
        8584,
        30847,
        13,
        51064
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10685313831676137,
      "compression_ratio": 1.496,
      "no_speech_prob": 0.002518875990062952
    },
    {
      "id": 42,
      "seek": 27328,
      "start": 287.28,
      "end": 293.44,
      "text": " So we want to generate an excel file that gets information of the index constituents. So we",
      "tokens": [
        51064,
        407,
        321,
        528,
        281,
        8460,
        364,
        24015,
        3991,
        300,
        2170,
        1589,
        295,
        264,
        8186,
        30847,
        13,
        407,
        321,
        51372
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10685313831676137,
      "compression_ratio": 1.496,
      "no_speech_prob": 0.002518875990062952
    },
    {
      "id": 43,
      "seek": 29344,
      "start": 293.44,
      "end": 309.12,
      "text": " define a function called gen constituents and as inputs we use start and frequency index and",
      "tokens": [
        50364,
        6964,
        257,
        2445,
        1219,
        1049,
        30847,
        293,
        382,
        15743,
        321,
        764,
        722,
        293,
        7893,
        8186,
        293,
        51148
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10072635520588268,
      "compression_ratio": 1.5039370078740157,
      "no_speech_prob": 0.0012065863702446222
    },
    {
      "id": 44,
      "seek": 29344,
      "start": 309.12,
      "end": 318.4,
      "text": " file name. So the start and the end specifies the time period of the data retrieval. The frequency",
      "tokens": [
        51148,
        3991,
        1315,
        13,
        407,
        264,
        722,
        293,
        264,
        917,
        1608,
        11221,
        264,
        565,
        2896,
        295,
        264,
        1412,
        19817,
        3337,
        13,
        440,
        7893,
        51612
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10072635520588268,
      "compression_ratio": 1.5039370078740157,
      "no_speech_prob": 0.0012065863702446222
    },
    {
      "id": 45,
      "seek": 31840,
      "start": 318.4,
      "end": 326.23999999999995,
      "text": " defines the frequency of the analysis so either daily monthly or yearly the index specifies",
      "tokens": [
        50364,
        23122,
        264,
        7893,
        295,
        264,
        5215,
        370,
        2139,
        5212,
        12878,
        420,
        39102,
        264,
        8186,
        1608,
        11221,
        50756
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1472891036500322,
      "compression_ratio": 1.6355932203389831,
      "no_speech_prob": 0.03853906691074371
    },
    {
      "id": 46,
      "seek": 31840,
      "start": 326.23999999999995,
      "end": 334.56,
      "text": " the index we want to use for example the s&p have hundred the spx the s&p 100 the oex or the Dow Jones",
      "tokens": [
        50756,
        264,
        8186,
        321,
        528,
        281,
        764,
        337,
        1365,
        264,
        262,
        5,
        79,
        362,
        3262,
        264,
        637,
        87,
        264,
        262,
        5,
        79,
        2319,
        264,
        277,
        3121,
        420,
        264,
        20947,
        10512,
        51172
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1472891036500322,
      "compression_ratio": 1.6355932203389831,
      "no_speech_prob": 0.03853906691074371
    },
    {
      "id": 47,
      "seek": 31840,
      "start": 334.56,
      "end": 340.47999999999996,
      "text": " industrial average in Bloomberg called Indu and then the file name this is just the name of the",
      "tokens": [
        51172,
        9987,
        4274,
        294,
        40363,
        1219,
        2333,
        84,
        293,
        550,
        264,
        3991,
        1315,
        341,
        307,
        445,
        264,
        1315,
        295,
        264,
        51468
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1472891036500322,
      "compression_ratio": 1.6355932203389831,
      "no_speech_prob": 0.03853906691074371
    },
    {
      "id": 48,
      "seek": 31840,
      "start": 340.47999999999996,
      "end": 347.28,
      "text": " excel file to be generated. First of all we are going to create an offset variable to ensure no",
      "tokens": [
        51468,
        24015,
        3991,
        281,
        312,
        10833,
        13,
        2386,
        295,
        439,
        321,
        366,
        516,
        281,
        1884,
        364,
        18687,
        7006,
        281,
        5586,
        572,
        51808
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1472891036500322,
      "compression_ratio": 1.6355932203389831,
      "no_speech_prob": 0.03853906691074371
    },
    {
      "id": 49,
      "seek": 34728,
      "start": 347.28,
      "end": 355.91999999999996,
      "text": " overlap when writing data to the excel sheet. Then we are going to create a pandas excel writer",
      "tokens": [
        50364,
        19959,
        562,
        3579,
        1412,
        281,
        264,
        24015,
        8193,
        13,
        1396,
        321,
        366,
        516,
        281,
        1884,
        257,
        4565,
        296,
        24015,
        9936,
        50796
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15911839647990902,
      "compression_ratio": 1.542857142857143,
      "no_speech_prob": 0.00851193442940712
    },
    {
      "id": 50,
      "seek": 34728,
      "start": 355.91999999999996,
      "end": 363.2,
      "text": " object using xls writer as the engine to write to the excel sheet.",
      "tokens": [
        50796,
        2657,
        1228,
        2031,
        11784,
        9936,
        382,
        264,
        2848,
        281,
        2464,
        281,
        264,
        24015,
        8193,
        13,
        51160
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15911839647990902,
      "compression_ratio": 1.542857142857143,
      "no_speech_prob": 0.00851193442940712
    },
    {
      "id": 51,
      "seek": 36320,
      "start": 363.2,
      "end": 379.12,
      "text": " Then we are going to define the index header of the data series.",
      "tokens": [
        50396,
        1396,
        321,
        366,
        516,
        281,
        6964,
        264,
        8186,
        23117,
        295,
        264,
        1412,
        2638,
        13,
        51160
      ],
      "temperature": 0.0,
      "avg_logprob": -0.207399424384622,
      "compression_ratio": 1.0,
      "no_speech_prob": 0.01713845506310463
    },
    {
      "id": 52,
      "seek": 42320,
      "start": 423.92,
      "end": 443.12,
      "text": " So",
      "tokens": [
        50400,
        407,
        51360
      ],
      "temperature": 0.0,
      "avg_logprob": -0.24867963790893555,
      "compression_ratio": 1.2222222222222223,
      "no_speech_prob": 0.12274882197380066
    },
    {
      "id": 53,
      "seek": 42320,
      "start": 445.44,
      "end": 451.76,
      "text": " now we're going to write the index header to the excel sheet using the pandas writer starting at",
      "tokens": [
        51476,
        586,
        321,
        434,
        516,
        281,
        2464,
        264,
        8186,
        23117,
        281,
        264,
        24015,
        8193,
        1228,
        264,
        4565,
        296,
        9936,
        2891,
        412,
        51792
      ],
      "temperature": 0.0,
      "avg_logprob": -0.24867963790893555,
      "compression_ratio": 1.2222222222222223,
      "no_speech_prob": 0.12274882197380066
    },
    {
      "id": 54,
      "seek": 45176,
      "start": 451.76,
      "end": 467.68,
      "text": " the specified location.",
      "tokens": [
        50364,
        264,
        22206,
        4914,
        13,
        51160
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2717925650732858,
      "compression_ratio": 0.7419354838709677,
      "no_speech_prob": 0.3977256715297699
    },
    {
      "id": 55,
      "seek": 48176,
      "start": 481.76,
      "end": 495.68,
      "text": " So",
      "tokens": [
        50364,
        407,
        51060
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2922647932301397,
      "compression_ratio": 1.1571428571428573,
      "no_speech_prob": 0.02291056700050831
    },
    {
      "id": 56,
      "seek": 48176,
      "start": 495.84,
      "end": 509.68,
      "text": " and then we update the offset of the next row of the writing the index header.",
      "tokens": [
        51068,
        293,
        550,
        321,
        5623,
        264,
        18687,
        295,
        264,
        958,
        5386,
        295,
        264,
        3579,
        264,
        8186,
        23117,
        13,
        51760
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2922647932301397,
      "compression_ratio": 1.1571428571428573,
      "no_speech_prob": 0.02291056700050831
    },
    {
      "id": 57,
      "seek": 51176,
      "start": 511.76,
      "end": 527.68,
      "text": " Now we define a data frame for the dates within the specified time period and frequency.",
      "tokens": [
        50412,
        823,
        321,
        6964,
        257,
        1412,
        3920,
        337,
        264,
        11691,
        1951,
        264,
        22206,
        565,
        2896,
        293,
        7893,
        13,
        51160
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1452980875968933,
      "compression_ratio": 1.1139240506329113,
      "no_speech_prob": 0.0028580196667462587
    },
    {
      "id": 58,
      "seek": 54176,
      "start": 541.92,
      "end": 555.68,
      "text": " So",
      "tokens": [
        50372,
        407,
        51060
      ],
      "temperature": 0.0,
      "avg_logprob": -0.3330641443079168,
      "compression_ratio": 1.0933333333333333,
      "no_speech_prob": 0.013196309097111225
    },
    {
      "id": 59,
      "seek": 54176,
      "start": 556.08,
      "end": 563.68,
      "text": " and now we add an empty column to the data frame to create alternating columns.",
      "tokens": [
        51080,
        293,
        586,
        321,
        909,
        364,
        6707,
        7738,
        281,
        264,
        1412,
        3920,
        281,
        1884,
        40062,
        13766,
        13,
        51460
      ],
      "temperature": 0.0,
      "avg_logprob": -0.3330641443079168,
      "compression_ratio": 1.0933333333333333,
      "no_speech_prob": 0.013196309097111225
    },
    {
      "id": 60,
      "seek": 57176,
      "start": 571.92,
      "end": 585.68,
      "text": " So",
      "tokens": [
        50372,
        407,
        51060
      ],
      "temperature": 0.0,
      "avg_logprob": -0.6896571159362793,
      "compression_ratio": 0.2,
      "no_speech_prob": 0.8098304867744446
    },
    {
      "id": 61,
      "seek": 58568,
      "start": 586.64,
      "end": 589.5999999999999,
      "text": " so",
      "tokens": [
        50412,
        370,
        50560
      ],
      "temperature": 0.0,
      "avg_logprob": -0.3821904533787778,
      "compression_ratio": 1.046875,
      "no_speech_prob": 0.01674238033592701
    },
    {
      "id": 62,
      "seek": 58568,
      "start": 599.5999999999999,
      "end": 607.5999999999999,
      "text": " and now we create a list of column indices in alternating order.",
      "tokens": [
        51060,
        293,
        586,
        321,
        1884,
        257,
        1329,
        295,
        7738,
        43840,
        294,
        40062,
        1668,
        13,
        51460
      ],
      "temperature": 0.0,
      "avg_logprob": -0.3821904533787778,
      "compression_ratio": 1.046875,
      "no_speech_prob": 0.01674238033592701
    },
    {
      "id": 63,
      "seek": 61568,
      "start": 616.64,
      "end": 619.5999999999999,
      "text": " So",
      "tokens": [
        50412,
        407,
        50560
      ],
      "temperature": 0.0,
      "avg_logprob": -0.27153076065911186,
      "compression_ratio": 0.9333333333333333,
      "no_speech_prob": 0.015212182886898518
    },
    {
      "id": 64,
      "seek": 61568,
      "start": 622.88,
      "end": 631.5999999999999,
      "text": " and now we write the dates column to the excel sheet.",
      "tokens": [
        50724,
        293,
        586,
        321,
        2464,
        264,
        11691,
        7738,
        281,
        264,
        24015,
        8193,
        13,
        51160
      ],
      "temperature": 0.0,
      "avg_logprob": -0.27153076065911186,
      "compression_ratio": 0.9333333333333333,
      "no_speech_prob": 0.015212182886898518
    },
    {
      "id": 65,
      "seek": 64568,
      "start": 645.68,
      "end": 655.5999999999999,
      "text": " So",
      "tokens": [
        50364,
        407,
        50860
      ],
      "temperature": 0.0,
      "avg_logprob": -0.28407512770758736,
      "compression_ratio": 0.9473684210526315,
      "no_speech_prob": 0.005096333101391792
    },
    {
      "id": 66,
      "seek": 64568,
      "start": 658.4799999999999,
      "end": 661.5999999999999,
      "text": " now we update the offset for the next data section.",
      "tokens": [
        51004,
        586,
        321,
        5623,
        264,
        18687,
        337,
        264,
        958,
        1412,
        3541,
        13,
        51160
      ],
      "temperature": 0.0,
      "avg_logprob": -0.28407512770758736,
      "compression_ratio": 0.9473684210526315,
      "no_speech_prob": 0.005096333101391792
    },
    {
      "id": 67,
      "seek": 66160,
      "start": 662.5600000000001,
      "end": 667.52,
      "text": " So",
      "tokens": [
        50412,
        407,
        50660
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2858580017089844,
      "compression_ratio": 1.2972972972972974,
      "no_speech_prob": 0.01888955943286419
    },
    {
      "id": 68,
      "seek": 66160,
      "start": 671.52,
      "end": 683.52,
      "text": " now we generate date override strings in the form of year year year year month month day day.",
      "tokens": [
        50860,
        586,
        321,
        8460,
        4002,
        42321,
        13985,
        294,
        264,
        1254,
        295,
        1064,
        1064,
        1064,
        1064,
        1618,
        1618,
        786,
        786,
        13,
        51460
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2858580017089844,
      "compression_ratio": 1.2972972972972974,
      "no_speech_prob": 0.01888955943286419
    },
    {
      "id": 69,
      "seek": 69160,
      "start": 691.6,
      "end": 703.52,
      "text": " So",
      "tokens": [
        50364,
        407,
        50960
      ],
      "temperature": 0.0,
      "avg_logprob": -0.8520833849906921,
      "compression_ratio": 0.2,
      "no_speech_prob": 0.6847898960113525
    },
    {
      "id": 70,
      "seek": 72160,
      "start": 721.6,
      "end": 733.52,
      "text": " so",
      "tokens": [
        50364,
        370,
        50960
      ],
      "temperature": 0.0,
      "avg_logprob": -0.8713822960853577,
      "compression_ratio": 0.2,
      "no_speech_prob": 0.6122359037399292
    },
    {
      "id": 71,
      "seek": 75160,
      "start": 751.76,
      "end": 753.52,
      "text": " so",
      "tokens": [
        50372,
        370,
        50460
      ],
      "temperature": 0.0,
      "avg_logprob": -0.33154990937974715,
      "compression_ratio": 1.0,
      "no_speech_prob": 0.010268764570355415
    },
    {
      "id": 72,
      "seek": 75160,
      "start": 755.28,
      "end": 767.52,
      "text": " now we add an empty column to create an alternating column.",
      "tokens": [
        50548,
        586,
        321,
        909,
        364,
        6707,
        7738,
        281,
        1884,
        364,
        40062,
        7738,
        13,
        51160
      ],
      "temperature": 0.0,
      "avg_logprob": -0.33154990937974715,
      "compression_ratio": 1.0,
      "no_speech_prob": 0.010268764570355415
    },
    {
      "id": 73,
      "seek": 78160,
      "start": 781.6,
      "end": 795.52,
      "text": " So",
      "tokens": [
        50364,
        407,
        51060
      ],
      "temperature": 0.0,
      "avg_logprob": -0.352684391869439,
      "compression_ratio": 0.9848484848484849,
      "no_speech_prob": 0.015721717849373817
    },
    {
      "id": 74,
      "seek": 78160,
      "start": 797.0400000000001,
      "end": 803.52,
      "text": " now we create the list of column indices in alternating order.",
      "tokens": [
        51136,
        586,
        321,
        1884,
        264,
        1329,
        295,
        7738,
        43840,
        294,
        40062,
        1668,
        13,
        51460
      ],
      "temperature": 0.0,
      "avg_logprob": -0.352684391869439,
      "compression_ratio": 0.9848484848484849,
      "no_speech_prob": 0.015721717849373817
    },
    {
      "id": 75,
      "seek": 81160,
      "start": 811.9200000000001,
      "end": 817.52,
      "text": " So",
      "tokens": [
        50380,
        407,
        50660
      ],
      "temperature": 0.0,
      "avg_logprob": -0.31336363156636554,
      "compression_ratio": 0.9523809523809523,
      "no_speech_prob": 0.007522387895733118
    },
    {
      "id": 76,
      "seek": 81160,
      "start": 823.44,
      "end": 833.52,
      "text": " now you write the date strings column to the excel sheet.",
      "tokens": [
        50956,
        586,
        291,
        2464,
        264,
        4002,
        13985,
        7738,
        281,
        264,
        24015,
        8193,
        13,
        51460
      ],
      "temperature": 0.0,
      "avg_logprob": -0.31336363156636554,
      "compression_ratio": 0.9523809523809523,
      "no_speech_prob": 0.007522387895733118
    },
    {
      "id": 77,
      "seek": 84160,
      "start": 842.24,
      "end": 853.52,
      "text": " So",
      "tokens": [
        50396,
        407,
        50960
      ],
      "temperature": 0.0,
      "avg_logprob": -0.30394944022683534,
      "compression_ratio": 0.9473684210526315,
      "no_speech_prob": 0.03451571241021156
    },
    {
      "id": 78,
      "seek": 84160,
      "start": 863.76,
      "end": 867.52,
      "text": " now we update the offset for the next data section.",
      "tokens": [
        51472,
        586,
        321,
        5623,
        264,
        18687,
        337,
        264,
        958,
        1412,
        3541,
        13,
        51660
      ],
      "temperature": 0.0,
      "avg_logprob": -0.30394944022683534,
      "compression_ratio": 0.9473684210526315,
      "no_speech_prob": 0.03451571241021156
    },
    {
      "id": 79,
      "seek": 87160,
      "start": 872.5600000000001,
      "end": 875.52,
      "text": " So",
      "tokens": [
        50412,
        407,
        50560
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2764535148938497,
      "compression_ratio": 1.123456790123457,
      "no_speech_prob": 0.0027858740650117397
    },
    {
      "id": 80,
      "seek": 87160,
      "start": 882.88,
      "end": 893.52,
      "text": " now we generate the excel code to perform a bloomer query for the historical index data.",
      "tokens": [
        50928,
        586,
        321,
        8460,
        264,
        24015,
        3089,
        281,
        2042,
        257,
        1749,
        14301,
        14581,
        337,
        264,
        8584,
        8186,
        1412,
        13,
        51460
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2764535148938497,
      "compression_ratio": 1.123456790123457,
      "no_speech_prob": 0.0027858740650117397
    },
    {
      "id": 81,
      "seek": 90160,
      "start": 901.6,
      "end": 913.52,
      "text": " So",
      "tokens": [
        50364,
        407,
        50960
      ],
      "temperature": 0.0,
      "avg_logprob": -0.8456075191497803,
      "compression_ratio": 0.2,
      "no_speech_prob": 0.6208668351173401
    },
    {
      "id": 82,
      "seek": 93160,
      "start": 931.6,
      "end": 943.52,
      "text": " so",
      "tokens": [
        50364,
        370,
        50960
      ],
      "temperature": 0.0,
      "avg_logprob": -0.9195301532745361,
      "compression_ratio": 0.2,
      "no_speech_prob": 0.6055174469947815
    },
    {
      "id": 83,
      "seek": 96160,
      "start": 961.6,
      "end": 977.52,
      "text": " in this command we use the bds bloomerc function to use the historical index market way of a specific company.",
      "tokens": [
        50412,
        294,
        341,
        5622,
        321,
        764,
        264,
        272,
        16063,
        1749,
        14301,
        66,
        2445,
        281,
        764,
        264,
        8584,
        8186,
        2142,
        636,
        295,
        257,
        2685,
        2237,
        13,
        51160
      ],
      "temperature": 0.0,
      "avg_logprob": -0.23434326383802626,
      "compression_ratio": 1.2359550561797752,
      "no_speech_prob": 0.017373748123645782
    },
    {
      "id": 84,
      "seek": 99160,
      "start": 991.6,
      "end": 1007.52,
      "text": " Now we add an empty column to create alternating columns.",
      "tokens": [
        50376,
        823,
        321,
        909,
        364,
        6707,
        7738,
        281,
        1884,
        40062,
        13766,
        13,
        51160
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11221252168927874,
      "compression_ratio": 0.9827586206896551,
      "no_speech_prob": 0.026109185069799423
    },
    {
      "id": 85,
      "seek": 102160,
      "start": 1021.6,
      "end": 1035.52,
      "text": " So",
      "tokens": [
        50364,
        407,
        51060
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2617110013961792,
      "compression_ratio": 1.0579710144927537,
      "no_speech_prob": 0.007257988676428795
    },
    {
      "id": 86,
      "seek": 102160,
      "start": 1037.04,
      "end": 1049.52,
      "text": " and now we create a list of column indices in alternating order again.",
      "tokens": [
        51136,
        293,
        586,
        321,
        1884,
        257,
        1329,
        295,
        7738,
        43840,
        294,
        40062,
        1668,
        797,
        13,
        51760
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2617110013961792,
      "compression_ratio": 1.0579710144927537,
      "no_speech_prob": 0.007257988676428795
    },
    {
      "id": 87,
      "seek": 105160,
      "start": 1051.9199999999998,
      "end": 1057.52,
      "text": " So",
      "tokens": [
        50380,
        407,
        50660
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2824173977500514,
      "compression_ratio": 1.0517241379310345,
      "no_speech_prob": 0.018162798136472702
    },
    {
      "id": 88,
      "seek": 105160,
      "start": 1072.08,
      "end": 1079.52,
      "text": " and now we write the excel code column to the excel sheet.",
      "tokens": [
        51388,
        293,
        586,
        321,
        2464,
        264,
        24015,
        3089,
        7738,
        281,
        264,
        24015,
        8193,
        13,
        51760
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2824173977500514,
      "compression_ratio": 1.0517241379310345,
      "no_speech_prob": 0.018162798136472702
    },
    {
      "id": 89,
      "seek": 108160,
      "start": 1081.6,
      "end": 1093.52,
      "text": " So",
      "tokens": [
        50364,
        407,
        50960
      ],
      "temperature": 0.0,
      "avg_logprob": -0.9799963235855103,
      "compression_ratio": 0.2,
      "no_speech_prob": 0.6066617369651794
    },
    {
      "id": 90,
      "seek": 111160,
      "start": 1111.76,
      "end": 1117.76,
      "text": " and now we close the pandas excel writer and save the excel file.",
      "tokens": [
        50372,
        293,
        586,
        321,
        1998,
        264,
        4565,
        296,
        24015,
        9936,
        293,
        3155,
        264,
        24015,
        3991,
        13,
        50672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1067684202483206,
      "compression_ratio": 1.6821192052980132,
      "no_speech_prob": 0.0008368417620658875
    },
    {
      "id": 91,
      "seek": 111160,
      "start": 1121.28,
      "end": 1124.56,
      "text": " And at the end we want to print a success message.",
      "tokens": [
        50848,
        400,
        412,
        264,
        917,
        321,
        528,
        281,
        4482,
        257,
        2245,
        3636,
        13,
        51012
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1067684202483206,
      "compression_ratio": 1.6821192052980132,
      "no_speech_prob": 0.0008368417620658875
    },
    {
      "id": 92,
      "seek": 111160,
      "start": 1128.3999999999999,
      "end": 1132.1599999999999,
      "text": " So this is it for the first function so we can run that.",
      "tokens": [
        51204,
        407,
        341,
        307,
        309,
        337,
        264,
        700,
        2445,
        370,
        321,
        393,
        1190,
        300,
        13,
        51392
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1067684202483206,
      "compression_ratio": 1.6821192052980132,
      "no_speech_prob": 0.0008368417620658875
    },
    {
      "id": 93,
      "seek": 111160,
      "start": 1132.1599999999999,
      "end": 1137.4399999999998,
      "text": " And now the second function we want to define is the function for the historical",
      "tokens": [
        51392,
        400,
        586,
        264,
        1150,
        2445,
        321,
        528,
        281,
        6964,
        307,
        264,
        2445,
        337,
        264,
        8584,
        51656
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1067684202483206,
      "compression_ratio": 1.6821192052980132,
      "no_speech_prob": 0.0008368417620658875
    },
    {
      "id": 94,
      "seek": 113744,
      "start": 1137.44,
      "end": 1143.6000000000001,
      "text": " constituents matrix which defines when is a certain asset active in the index with a 1",
      "tokens": [
        50364,
        30847,
        8141,
        597,
        23122,
        562,
        307,
        257,
        1629,
        11999,
        4967,
        294,
        264,
        8186,
        365,
        257,
        502,
        50672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11077695801144555,
      "compression_ratio": 1.4308943089430894,
      "no_speech_prob": 0.01940000057220459
    },
    {
      "id": 95,
      "seek": 113744,
      "start": 1143.6000000000001,
      "end": 1151.2,
      "text": " or inactive with a 0. Okay so we make a definition of the create history security matrix.",
      "tokens": [
        50672,
        420,
        294,
        12596,
        365,
        257,
        1958,
        13,
        1033,
        370,
        321,
        652,
        257,
        7123,
        295,
        264,
        1884,
        2503,
        3825,
        8141,
        13,
        51052
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11077695801144555,
      "compression_ratio": 1.4308943089430894,
      "no_speech_prob": 0.01940000057220459
    },
    {
      "id": 96,
      "seek": 115120,
      "start": 1151.2,
      "end": 1166.96,
      "text": " So first we define our definition name and the inputs.",
      "tokens": [
        50364,
        407,
        700,
        321,
        6964,
        527,
        7123,
        1315,
        293,
        264,
        15743,
        13,
        51152
      ],
      "temperature": 0.0,
      "avg_logprob": -0.20243132909138997,
      "compression_ratio": 0.9473684210526315,
      "no_speech_prob": 0.005378034897148609
    },
    {
      "id": 97,
      "seek": 116696,
      "start": 1167.3600000000001,
      "end": 1181.44,
      "text": " So our file name is the excel file name where the historical constituents matrix",
      "tokens": [
        50384,
        407,
        527,
        3991,
        1315,
        307,
        264,
        24015,
        3991,
        1315,
        689,
        264,
        8584,
        30847,
        8141,
        51088
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12666925068559318,
      "compression_ratio": 1.836734693877551,
      "no_speech_prob": 0.0006152731948532164
    },
    {
      "id": 98,
      "seek": 116696,
      "start": 1181.44,
      "end": 1187.92,
      "text": " will be stored and the source data sheet name is the name of the source excel sheet containing",
      "tokens": [
        51088,
        486,
        312,
        12187,
        293,
        264,
        4009,
        1412,
        8193,
        1315,
        307,
        264,
        1315,
        295,
        264,
        4009,
        24015,
        8193,
        19273,
        51412
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12666925068559318,
      "compression_ratio": 1.836734693877551,
      "no_speech_prob": 0.0006152731948532164
    },
    {
      "id": 99,
      "seek": 116696,
      "start": 1187.92,
      "end": 1194.24,
      "text": " the historical constituents data which we just defined above. So now we read the data from the",
      "tokens": [
        51412,
        264,
        8584,
        30847,
        1412,
        597,
        321,
        445,
        7642,
        3673,
        13,
        407,
        586,
        321,
        1401,
        264,
        1412,
        490,
        264,
        51728
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12666925068559318,
      "compression_ratio": 1.836734693877551,
      "no_speech_prob": 0.0006152731948532164
    },
    {
      "id": 100,
      "seek": 119424,
      "start": 1194.32,
      "end": 1210.0,
      "text": " specified excel sheet and we skip the first rows.",
      "tokens": [
        50368,
        22206,
        24015,
        8193,
        293,
        321,
        10023,
        264,
        700,
        13241,
        13,
        51152
      ],
      "temperature": 0.0,
      "avg_logprob": -0.23993962151663645,
      "compression_ratio": 0.9245283018867925,
      "no_speech_prob": 0.039306383579969406
    },
    {
      "id": 101,
      "seek": 121000,
      "start": 1210.72,
      "end": 1213.76,
      "text": " So",
      "tokens": [
        50400,
        407,
        50552
      ],
      "temperature": 0.0,
      "avg_logprob": -0.3163330554962158,
      "compression_ratio": 1.1375,
      "no_speech_prob": 0.002085288753733039
    },
    {
      "id": 102,
      "seek": 121000,
      "start": 1220.96,
      "end": 1225.76,
      "text": " next we remove the first rows which are just containing the column names or the headers.",
      "tokens": [
        50912,
        958,
        321,
        4159,
        264,
        700,
        13241,
        597,
        366,
        445,
        19273,
        264,
        7738,
        5288,
        420,
        264,
        45101,
        13,
        51152
      ],
      "temperature": 0.0,
      "avg_logprob": -0.3163330554962158,
      "compression_ratio": 1.1375,
      "no_speech_prob": 0.002085288753733039
    },
    {
      "id": 103,
      "seek": 122576,
      "start": 1225.76,
      "end": 1241.52,
      "text": " And now we extract the dates from the data frames column names.",
      "tokens": [
        50364,
        400,
        586,
        321,
        8947,
        264,
        11691,
        490,
        264,
        1412,
        12083,
        7738,
        5288,
        13,
        51152
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2390611320734024,
      "compression_ratio": 1.05,
      "no_speech_prob": 0.015687942504882812
    },
    {
      "id": 104,
      "seek": 125576,
      "start": 1255.76,
      "end": 1271.52,
      "text": " And now we extract the unique securities the assets from the data considering a 0 as a placeholder.",
      "tokens": [
        50392,
        400,
        586,
        321,
        8947,
        264,
        3845,
        38597,
        264,
        9769,
        490,
        264,
        1412,
        8079,
        257,
        1958,
        382,
        257,
        1081,
        20480,
        13,
        51152
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1235189852507218,
      "compression_ratio": 1.1647058823529413,
      "no_speech_prob": 0.0072820172645151615
    },
    {
      "id": 105,
      "seek": 128576,
      "start": 1286.64,
      "end": 1301.52,
      "text": " Then we remove the placeholder 0 from the list of securities.",
      "tokens": [
        50408,
        1396,
        321,
        4159,
        264,
        1081,
        20480,
        1958,
        490,
        264,
        1329,
        295,
        38597,
        13,
        51152
      ],
      "temperature": 0.0,
      "avg_logprob": -0.30198487113503847,
      "compression_ratio": 0.9384615384615385,
      "no_speech_prob": 0.008254004642367363
    },
    {
      "id": 106,
      "seek": 130152,
      "start": 1301.92,
      "end": 1320.56,
      "text": " And now we create an empty data frame to represent the historical security matrix.",
      "tokens": [
        50384,
        400,
        586,
        321,
        1884,
        364,
        6707,
        1412,
        3920,
        281,
        2906,
        264,
        8584,
        3825,
        8141,
        13,
        51316
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16114762425422668,
      "compression_ratio": 1.439252336448598,
      "no_speech_prob": 0.004021344240754843
    },
    {
      "id": 107,
      "seek": 130152,
      "start": 1320.56,
      "end": 1325.28,
      "text": " Here the columns represent the dates and the rows represent securities.",
      "tokens": [
        51316,
        1692,
        264,
        13766,
        2906,
        264,
        11691,
        293,
        264,
        13241,
        2906,
        38597,
        13,
        51552
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16114762425422668,
      "compression_ratio": 1.439252336448598,
      "no_speech_prob": 0.004021344240754843
    },
    {
      "id": 108,
      "seek": 133152,
      "start": 1331.52,
      "end": 1341.28,
      "text": " So",
      "tokens": [
        50364,
        407,
        50852
      ],
      "temperature": 0.0,
      "avg_logprob": -0.9042911529541016,
      "compression_ratio": 0.2,
      "no_speech_prob": 0.11752298474311829
    },
    {
      "id": 109,
      "seek": 134128,
      "start": 1341.52,
      "end": 1361.52,
      "text": " and now we populate the security matrix with 1 if a security is active on a particular date.",
      "tokens": [
        50376,
        293,
        586,
        321,
        1665,
        5256,
        264,
        3825,
        8141,
        365,
        502,
        498,
        257,
        3825,
        307,
        4967,
        322,
        257,
        1729,
        4002,
        13,
        51376
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2830880880355835,
      "compression_ratio": 1.15,
      "no_speech_prob": 0.0017757164314389229
    },
    {
      "id": 110,
      "seek": 136152,
      "start": 1361.52,
      "end": 1373.76,
      "text": " We do that with two four loops.",
      "tokens": [
        50364,
        492,
        360,
        300,
        365,
        732,
        1451,
        16121,
        13,
        50976
      ],
      "temperature": 0.0,
      "avg_logprob": -0.3488336404164632,
      "compression_ratio": 0.7948717948717948,
      "no_speech_prob": 0.26793116331100464
    },
    {
      "id": 111,
      "seek": 137376,
      "start": 1373.92,
      "end": 1376.0,
      "text": " And",
      "tokens": [
        50372,
        400,
        50476
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2716846466064453,
      "compression_ratio": 1.1851851851851851,
      "no_speech_prob": 0.011009483598172665
    },
    {
      "id": 112,
      "seek": 137376,
      "start": 1389.52,
      "end": 1398.0,
      "text": " now we append the security matrix to the existing excel file using the open py excel engine.",
      "tokens": [
        51152,
        586,
        321,
        34116,
        264,
        3825,
        8141,
        281,
        264,
        6741,
        24015,
        3991,
        1228,
        264,
        1269,
        10664,
        24015,
        2848,
        13,
        51576
      ],
      "temperature": 0.0,
      "avg_logprob": -0.2716846466064453,
      "compression_ratio": 1.1851851851851851,
      "no_speech_prob": 0.011009483598172665
    },
    {
      "id": 113,
      "seek": 143376,
      "start": 1434.64,
      "end": 1436.0,
      "text": " So",
      "tokens": [
        50408,
        407,
        50476
      ],
      "temperature": 0.0,
      "avg_logprob": -0.31395766470167374,
      "compression_ratio": 0.8928571428571429,
      "no_speech_prob": 0.021587178111076355
    },
    {
      "id": 114,
      "seek": 143376,
      "start": 1451.28,
      "end": 1455.2,
      "text": " if it worked now we also want to print success.",
      "tokens": [
        51240,
        498,
        309,
        2732,
        586,
        321,
        611,
        528,
        281,
        4482,
        2245,
        13,
        51436
      ],
      "temperature": 0.0,
      "avg_logprob": -0.31395766470167374,
      "compression_ratio": 0.8928571428571429,
      "no_speech_prob": 0.021587178111076355
    },
    {
      "id": 115,
      "seek": 145520,
      "start": 1456.0800000000002,
      "end": 1465.76,
      "text": " And now we run that oh I see here we need to define the brackets like that.",
      "tokens": [
        50408,
        400,
        586,
        321,
        1190,
        300,
        1954,
        286,
        536,
        510,
        321,
        643,
        281,
        6964,
        264,
        26179,
        411,
        300,
        13,
        50892
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15945717493693035,
      "compression_ratio": 1.6,
      "no_speech_prob": 0.016036752611398697
    },
    {
      "id": 116,
      "seek": 145520,
      "start": 1466.64,
      "end": 1471.2,
      "text": " And now we try to run that again. Now it seems to be correct.",
      "tokens": [
        50936,
        400,
        586,
        321,
        853,
        281,
        1190,
        300,
        797,
        13,
        823,
        309,
        2544,
        281,
        312,
        3006,
        13,
        51164
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15945717493693035,
      "compression_ratio": 1.6,
      "no_speech_prob": 0.016036752611398697
    },
    {
      "id": 117,
      "seek": 145520,
      "start": 1472.0800000000002,
      "end": 1478.24,
      "text": " Okay and now we need to define the specific parameters for the function. So we want to",
      "tokens": [
        51208,
        1033,
        293,
        586,
        321,
        643,
        281,
        6964,
        264,
        2685,
        9834,
        337,
        264,
        2445,
        13,
        407,
        321,
        528,
        281,
        51516
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15945717493693035,
      "compression_ratio": 1.6,
      "no_speech_prob": 0.016036752611398697
    },
    {
      "id": 118,
      "seek": 147824,
      "start": 1478.4,
      "end": 1486.96,
      "text": " define the start date. In my case I want to use a period of three years starting from 2020 until",
      "tokens": [
        50372,
        6964,
        264,
        722,
        4002,
        13,
        682,
        452,
        1389,
        286,
        528,
        281,
        764,
        257,
        2896,
        295,
        1045,
        924,
        2891,
        490,
        4808,
        1826,
        50800
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08386963489008885,
      "compression_ratio": 1.4772727272727273,
      "no_speech_prob": 0.010836014524102211
    },
    {
      "id": 119,
      "seek": 147824,
      "start": 1486.96,
      "end": 1506.96,
      "text": " the end of 2022. And then we also need to specify the frequency. In my case I want to have a daily",
      "tokens": [
        50800,
        264,
        917,
        295,
        20229,
        13,
        400,
        550,
        321,
        611,
        643,
        281,
        16500,
        264,
        7893,
        13,
        682,
        452,
        1389,
        286,
        528,
        281,
        362,
        257,
        5212,
        51800
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08386963489008885,
      "compression_ratio": 1.4772727272727273,
      "no_speech_prob": 0.010836014524102211
    },
    {
      "id": 120,
      "seek": 150696,
      "start": 1506.96,
      "end": 1514.64,
      "text": " so a capital D. Then we also need to specify the index. In our case it's the Dow Jones industrial",
      "tokens": [
        50364,
        370,
        257,
        4238,
        413,
        13,
        1396,
        321,
        611,
        643,
        281,
        16500,
        264,
        8186,
        13,
        682,
        527,
        1389,
        309,
        311,
        264,
        20947,
        10512,
        9987,
        50748
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15480899810791016,
      "compression_ratio": 1.6204819277108433,
      "no_speech_prob": 0.005236444994807243
    },
    {
      "id": 121,
      "seek": 150696,
      "start": 1514.64,
      "end": 1523.04,
      "text": " average index and in Bloomberg it's called Indu index. Then we specify our preferred file name.",
      "tokens": [
        50748,
        4274,
        8186,
        293,
        294,
        40363,
        309,
        311,
        1219,
        2333,
        84,
        8186,
        13,
        1396,
        321,
        16500,
        527,
        16494,
        3991,
        1315,
        13,
        51168
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15480899810791016,
      "compression_ratio": 1.6204819277108433,
      "no_speech_prob": 0.005236444994807243
    },
    {
      "id": 122,
      "seek": 150696,
      "start": 1525.6000000000001,
      "end": 1530.16,
      "text": " And we are going to call it Constituent Dow Jones industrial average daily.",
      "tokens": [
        51296,
        400,
        321,
        366,
        516,
        281,
        818,
        309,
        8574,
        6380,
        317,
        20947,
        10512,
        9987,
        4274,
        5212,
        13,
        51524
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15480899810791016,
      "compression_ratio": 1.6204819277108433,
      "no_speech_prob": 0.005236444994807243
    },
    {
      "id": 123,
      "seek": 153696,
      "start": 1537.44,
      "end": 1546.24,
      "text": " And we also need to specify our source data sheet name for the second function.",
      "tokens": [
        50388,
        400,
        321,
        611,
        643,
        281,
        16500,
        527,
        4009,
        1412,
        8193,
        1315,
        337,
        264,
        1150,
        2445,
        13,
        50828
      ],
      "temperature": 0.0,
      "avg_logprob": -0.27857379913330077,
      "compression_ratio": 1.3779527559055118,
      "no_speech_prob": 0.0016028134850785136
    },
    {
      "id": 124,
      "seek": 153696,
      "start": 1553.76,
      "end": 1563.6000000000001,
      "text": " Okay so we run that and now we can actually use our function with the specified parameters from",
      "tokens": [
        51204,
        1033,
        370,
        321,
        1190,
        300,
        293,
        586,
        321,
        393,
        767,
        764,
        527,
        2445,
        365,
        264,
        22206,
        9834,
        490,
        51696
      ],
      "temperature": 0.0,
      "avg_logprob": -0.27857379913330077,
      "compression_ratio": 1.3779527559055118,
      "no_speech_prob": 0.0016028134850785136
    },
    {
      "id": 125,
      "seek": 156360,
      "start": 1563.6,
      "end": 1576.0,
      "text": " the first function is the generate Constituents. And here we need the start and the frequency",
      "tokens": [
        50364,
        264,
        700,
        2445,
        307,
        264,
        8460,
        8574,
        6380,
        791,
        13,
        400,
        510,
        321,
        643,
        264,
        722,
        293,
        264,
        7893,
        50984
      ],
      "temperature": 0.0,
      "avg_logprob": -0.19985080295138888,
      "compression_ratio": 1.4153846153846155,
      "no_speech_prob": 0.0019533326849341393
    },
    {
      "id": 126,
      "seek": 156360,
      "start": 1576.0,
      "end": 1585.6,
      "text": " which index and the file name. Okay now we run that. Okay so we have an unexpected keyword",
      "tokens": [
        50984,
        597,
        8186,
        293,
        264,
        3991,
        1315,
        13,
        1033,
        586,
        321,
        1190,
        300,
        13,
        1033,
        370,
        321,
        362,
        364,
        13106,
        20428,
        51464
      ],
      "temperature": 0.0,
      "avg_logprob": -0.19985080295138888,
      "compression_ratio": 1.4153846153846155,
      "no_speech_prob": 0.0019533326849341393
    },
    {
      "id": 127,
      "seek": 158560,
      "start": 1585.6,
      "end": 1597.1999999999998,
      "text": " argument date in this column here. I think this date is data with an A. So let's change that above here.",
      "tokens": [
        50364,
        6770,
        4002,
        294,
        341,
        7738,
        510,
        13,
        286,
        519,
        341,
        4002,
        307,
        1412,
        365,
        364,
        316,
        13,
        407,
        718,
        311,
        1319,
        300,
        3673,
        510,
        13,
        50944
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1094717150149138,
      "compression_ratio": 1.3688524590163935,
      "no_speech_prob": 0.022736215963959694
    },
    {
      "id": 128,
      "seek": 158560,
      "start": 1602.24,
      "end": 1608.32,
      "text": " We can run the function again and let's try if that works now.",
      "tokens": [
        51196,
        492,
        393,
        1190,
        264,
        2445,
        797,
        293,
        718,
        311,
        853,
        498,
        300,
        1985,
        586,
        13,
        51500
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1094717150149138,
      "compression_ratio": 1.3688524590163935,
      "no_speech_prob": 0.022736215963959694
    },
    {
      "id": 129,
      "seek": 160832,
      "start": 1608.3999999999999,
      "end": 1617.4399999999998,
      "text": " Okay so we have a success. You're also one C. More.",
      "tokens": [
        50368,
        1033,
        370,
        321,
        362,
        257,
        2245,
        13,
        509,
        434,
        611,
        472,
        383,
        13,
        5048,
        13,
        50820
      ],
      "temperature": 0.0,
      "avg_logprob": -0.19986790418624878,
      "compression_ratio": 1.5454545454545454,
      "no_speech_prob": 0.0017750445986166596
    },
    {
      "id": 130,
      "seek": 160832,
      "start": 1622.0,
      "end": 1630.08,
      "text": " Okay so now we have a success and what we actually want to do now is we need to open our",
      "tokens": [
        51048,
        1033,
        370,
        586,
        321,
        362,
        257,
        2245,
        293,
        437,
        321,
        767,
        528,
        281,
        360,
        586,
        307,
        321,
        643,
        281,
        1269,
        527,
        51452
      ],
      "temperature": 0.0,
      "avg_logprob": -0.19986790418624878,
      "compression_ratio": 1.5454545454545454,
      "no_speech_prob": 0.0017750445986166596
    },
    {
      "id": 131,
      "seek": 160832,
      "start": 1630.08,
      "end": 1636.08,
      "text": " Excel file with the Bloomberg Excel add-in and we want to wait for the download of the historical",
      "tokens": [
        51452,
        19060,
        3991,
        365,
        264,
        40363,
        19060,
        909,
        12,
        259,
        293,
        321,
        528,
        281,
        1699,
        337,
        264,
        5484,
        295,
        264,
        8584,
        51752
      ],
      "temperature": 0.0,
      "avg_logprob": -0.19986790418624878,
      "compression_ratio": 1.5454545454545454,
      "no_speech_prob": 0.0017750445986166596
    },
    {
      "id": 132,
      "seek": 163608,
      "start": 1636.08,
      "end": 1642.96,
      "text": " constituents in order to use the second function because here we need the input of the first sheet",
      "tokens": [
        50364,
        30847,
        294,
        1668,
        281,
        764,
        264,
        1150,
        2445,
        570,
        510,
        321,
        643,
        264,
        4846,
        295,
        264,
        700,
        8193,
        50708
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08074318844339122,
      "compression_ratio": 1.8110599078341014,
      "no_speech_prob": 0.003874799469485879
    },
    {
      "id": 133,
      "seek": 163608,
      "start": 1642.96,
      "end": 1648.32,
      "text": " in the Excel. And now we first actually need to download the data now with this function and this",
      "tokens": [
        50708,
        294,
        264,
        19060,
        13,
        400,
        586,
        321,
        700,
        767,
        643,
        281,
        5484,
        264,
        1412,
        586,
        365,
        341,
        2445,
        293,
        341,
        50976
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08074318844339122,
      "compression_ratio": 1.8110599078341014,
      "no_speech_prob": 0.003874799469485879
    },
    {
      "id": 134,
      "seek": 163608,
      "start": 1648.32,
      "end": 1654.8,
      "text": " only happens when we open the Excel and then the Bloomberg is going to load all the data in there.",
      "tokens": [
        50976,
        787,
        2314,
        562,
        321,
        1269,
        264,
        19060,
        293,
        550,
        264,
        40363,
        307,
        516,
        281,
        3677,
        439,
        264,
        1412,
        294,
        456,
        13,
        51300
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08074318844339122,
      "compression_ratio": 1.8110599078341014,
      "no_speech_prob": 0.003874799469485879
    },
    {
      "id": 135,
      "seek": 163608,
      "start": 1654.8,
      "end": 1661.36,
      "text": " So as you can see here we use the Excel with the Bloomberg add-in. This is very important and now",
      "tokens": [
        51300,
        407,
        382,
        291,
        393,
        536,
        510,
        321,
        764,
        264,
        19060,
        365,
        264,
        40363,
        909,
        12,
        259,
        13,
        639,
        307,
        588,
        1021,
        293,
        586,
        51628
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08074318844339122,
      "compression_ratio": 1.8110599078341014,
      "no_speech_prob": 0.003874799469485879
    },
    {
      "id": 136,
      "seek": 166136,
      "start": 1661.36,
      "end": 1672.8,
      "text": " you can open your file. Okay so now we are opening our file and as you can see now Bloomberg is",
      "tokens": [
        50364,
        291,
        393,
        1269,
        428,
        3991,
        13,
        1033,
        370,
        586,
        321,
        366,
        5193,
        527,
        3991,
        293,
        382,
        291,
        393,
        536,
        586,
        40363,
        307,
        50936
      ],
      "temperature": 0.0,
      "avg_logprob": -0.037606634412493026,
      "compression_ratio": 1.6214689265536724,
      "no_speech_prob": 0.0011908417800441384
    },
    {
      "id": 137,
      "seek": 166136,
      "start": 1672.8,
      "end": 1682.4799999999998,
      "text": " actually loading the data in there. So we just wait until every data point is loaded. This seems",
      "tokens": [
        50936,
        767,
        15114,
        264,
        1412,
        294,
        456,
        13,
        407,
        321,
        445,
        1699,
        1826,
        633,
        1412,
        935,
        307,
        13210,
        13,
        639,
        2544,
        51420
      ],
      "temperature": 0.0,
      "avg_logprob": -0.037606634412493026,
      "compression_ratio": 1.6214689265536724,
      "no_speech_prob": 0.0011908417800441384
    },
    {
      "id": 138,
      "seek": 166136,
      "start": 1682.4799999999998,
      "end": 1690.56,
      "text": " to be the case now and actually we need to save our file in order to download our second sheet",
      "tokens": [
        51420,
        281,
        312,
        264,
        1389,
        586,
        293,
        767,
        321,
        643,
        281,
        3155,
        527,
        3991,
        294,
        1668,
        281,
        5484,
        527,
        1150,
        8193,
        51824
      ],
      "temperature": 0.0,
      "avg_logprob": -0.037606634412493026,
      "compression_ratio": 1.6214689265536724,
      "no_speech_prob": 0.0011908417800441384
    },
    {
      "id": 139,
      "seek": 169056,
      "start": 1690.56,
      "end": 1696.08,
      "text": " with the constituents matrix with the zeros and the ones. So this was only the first step",
      "tokens": [
        50364,
        365,
        264,
        30847,
        8141,
        365,
        264,
        35193,
        293,
        264,
        2306,
        13,
        407,
        341,
        390,
        787,
        264,
        700,
        1823,
        50640
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10751321166753769,
      "compression_ratio": 1.5485714285714285,
      "no_speech_prob": 0.0028945868834853172
    },
    {
      "id": 140,
      "seek": 169056,
      "start": 1696.08,
      "end": 1702.0,
      "text": " with the first function so we save and we close that Excel file again go back to our",
      "tokens": [
        50640,
        365,
        264,
        700,
        2445,
        370,
        321,
        3155,
        293,
        321,
        1998,
        300,
        19060,
        3991,
        797,
        352,
        646,
        281,
        527,
        50936
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10751321166753769,
      "compression_ratio": 1.5485714285714285,
      "no_speech_prob": 0.0028945868834853172
    },
    {
      "id": 141,
      "seek": 169056,
      "start": 1702.0,
      "end": 1708.08,
      "text": " Jupyter Notebook and now we need to use our second defined function which was the create history",
      "tokens": [
        50936,
        22125,
        88,
        391,
        11633,
        2939,
        293,
        586,
        321,
        643,
        281,
        764,
        527,
        1150,
        7642,
        2445,
        597,
        390,
        264,
        1884,
        2503,
        51240
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10751321166753769,
      "compression_ratio": 1.5485714285714285,
      "no_speech_prob": 0.0028945868834853172
    },
    {
      "id": 142,
      "seek": 170808,
      "start": 1708.08,
      "end": 1721.6,
      "text": " security matrix. And here we need the file name and the source data sheet name.",
      "tokens": [
        50364,
        3825,
        8141,
        13,
        400,
        510,
        321,
        643,
        264,
        3991,
        1315,
        293,
        264,
        4009,
        1412,
        8193,
        1315,
        13,
        51040
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1309688035831895,
      "compression_ratio": 1.3125,
      "no_speech_prob": 0.012299460358917713
    },
    {
      "id": 143,
      "seek": 170808,
      "start": 1726.56,
      "end": 1728.1599999999999,
      "text": " So let's try to run that.",
      "tokens": [
        51288,
        407,
        718,
        311,
        853,
        281,
        1190,
        300,
        13,
        51368
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1309688035831895,
      "compression_ratio": 1.3125,
      "no_speech_prob": 0.012299460358917713
    },
    {
      "id": 144,
      "seek": 170808,
      "start": 1731.84,
      "end": 1734.32,
      "text": " It's still running let's wait a bit more.",
      "tokens": [
        51552,
        467,
        311,
        920,
        2614,
        718,
        311,
        1699,
        257,
        857,
        544,
        13,
        51676
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1309688035831895,
      "compression_ratio": 1.3125,
      "no_speech_prob": 0.012299460358917713
    },
    {
      "id": 145,
      "seek": 173808,
      "start": 1738.08,
      "end": 1745.84,
      "text": " Okay now we also have a success here. So for that we now also need to again open the Excel file to",
      "tokens": [
        50364,
        1033,
        586,
        321,
        611,
        362,
        257,
        2245,
        510,
        13,
        407,
        337,
        300,
        321,
        586,
        611,
        643,
        281,
        797,
        1269,
        264,
        19060,
        3991,
        281,
        50752
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10120198130607605,
      "compression_ratio": 1.451851851851852,
      "no_speech_prob": 0.0003772935306187719
    },
    {
      "id": 146,
      "seek": 173808,
      "start": 1745.84,
      "end": 1761.84,
      "text": " see what happens. So now we have this second sheet here the history security matrix which we just",
      "tokens": [
        50752,
        536,
        437,
        2314,
        13,
        407,
        586,
        321,
        362,
        341,
        1150,
        8193,
        510,
        264,
        2503,
        3825,
        8141,
        597,
        321,
        445,
        51552
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10120198130607605,
      "compression_ratio": 1.451851851851852,
      "no_speech_prob": 0.0003772935306187719
    },
    {
      "id": 147,
      "seek": 176184,
      "start": 1761.9199999999998,
      "end": 1769.1999999999998,
      "text": " defined in the code and as you can see here we have in the first row we have our dates",
      "tokens": [
        50368,
        7642,
        294,
        264,
        3089,
        293,
        382,
        291,
        393,
        536,
        510,
        321,
        362,
        294,
        264,
        700,
        5386,
        321,
        362,
        527,
        11691,
        50732
      ],
      "temperature": 0.0,
      "avg_logprob": -0.067643897634157,
      "compression_ratio": 1.7117647058823529,
      "no_speech_prob": 0.04788406938314438
    },
    {
      "id": 148,
      "seek": 176184,
      "start": 1769.1999999999998,
      "end": 1778.1599999999999,
      "text": " specified from the beginning of 2020 until the end of 2022 here and for every column as you can see",
      "tokens": [
        50732,
        22206,
        490,
        264,
        2863,
        295,
        4808,
        1826,
        264,
        917,
        295,
        20229,
        510,
        293,
        337,
        633,
        7738,
        382,
        291,
        393,
        536,
        51180
      ],
      "temperature": 0.0,
      "avg_logprob": -0.067643897634157,
      "compression_ratio": 1.7117647058823529,
      "no_speech_prob": 0.04788406938314438
    },
    {
      "id": 149,
      "seek": 176184,
      "start": 1778.1599999999999,
      "end": 1786.1599999999999,
      "text": " we have here ones and we have zeros and now let's check if we have for a random date the 30 constituents",
      "tokens": [
        51180,
        321,
        362,
        510,
        2306,
        293,
        321,
        362,
        35193,
        293,
        586,
        718,
        311,
        1520,
        498,
        321,
        362,
        337,
        257,
        4974,
        4002,
        264,
        2217,
        30847,
        51580
      ],
      "temperature": 0.0,
      "avg_logprob": -0.067643897634157,
      "compression_ratio": 1.7117647058823529,
      "no_speech_prob": 0.04788406938314438
    },
    {
      "id": 150,
      "seek": 178616,
      "start": 1786.16,
      "end": 1793.3600000000001,
      "text": " in the index. So we have some 30 constituents and in total during those three years we have 34",
      "tokens": [
        50364,
        294,
        264,
        8186,
        13,
        407,
        321,
        362,
        512,
        2217,
        30847,
        293,
        294,
        3217,
        1830,
        729,
        1045,
        924,
        321,
        362,
        12790,
        50724
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06384408473968506,
      "compression_ratio": 1.8640776699029127,
      "no_speech_prob": 0.0739031508564949
    },
    {
      "id": 151,
      "seek": 178616,
      "start": 1793.3600000000001,
      "end": 1799.76,
      "text": " constituents but four are not active at this specific point in time so we have here a zero here",
      "tokens": [
        50724,
        30847,
        457,
        1451,
        366,
        406,
        4967,
        412,
        341,
        2685,
        935,
        294,
        565,
        370,
        321,
        362,
        510,
        257,
        4018,
        510,
        51044
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06384408473968506,
      "compression_ratio": 1.8640776699029127,
      "no_speech_prob": 0.0739031508564949
    },
    {
      "id": 152,
      "seek": 178616,
      "start": 1799.76,
      "end": 1806.5600000000002,
      "text": " one here one and here one and those companies are at this specific point in time not in the index",
      "tokens": [
        51044,
        472,
        510,
        472,
        293,
        510,
        472,
        293,
        729,
        3431,
        366,
        412,
        341,
        2685,
        935,
        294,
        565,
        406,
        294,
        264,
        8186,
        51384
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06384408473968506,
      "compression_ratio": 1.8640776699029127,
      "no_speech_prob": 0.0739031508564949
    },
    {
      "id": 153,
      "seek": 178616,
      "start": 1806.5600000000002,
      "end": 1812.16,
      "text": " but you still need to account for them in your analysis if you want to use this historical data",
      "tokens": [
        51384,
        457,
        291,
        920,
        643,
        281,
        2696,
        337,
        552,
        294,
        428,
        5215,
        498,
        291,
        528,
        281,
        764,
        341,
        8584,
        1412,
        51664
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06384408473968506,
      "compression_ratio": 1.8640776699029127,
      "no_speech_prob": 0.0739031508564949
    },
    {
      "id": 154,
      "seek": 181216,
      "start": 1812.16,
      "end": 1820.16,
      "text": " with this index universe. Okay and now in order to use that Excel in your case for your thesis for",
      "tokens": [
        50364,
        365,
        341,
        8186,
        6445,
        13,
        1033,
        293,
        586,
        294,
        1668,
        281,
        764,
        300,
        19060,
        294,
        428,
        1389,
        337,
        428,
        22288,
        337,
        50764
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05818402489950491,
      "compression_ratio": 1.7477477477477477,
      "no_speech_prob": 0.02589164860546589
    },
    {
      "id": 155,
      "seek": 181216,
      "start": 1820.16,
      "end": 1827.0400000000002,
      "text": " your paper whatever you need to also make sure that you copy and paste only the values of this",
      "tokens": [
        50764,
        428,
        3035,
        2035,
        291,
        643,
        281,
        611,
        652,
        988,
        300,
        291,
        5055,
        293,
        9163,
        787,
        264,
        4190,
        295,
        341,
        51108
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05818402489950491,
      "compression_ratio": 1.7477477477477477,
      "no_speech_prob": 0.02589164860546589
    },
    {
      "id": 156,
      "seek": 181216,
      "start": 1827.0400000000002,
      "end": 1834.0800000000002,
      "text": " Excel sheet because if you want to use this Excel with a computer that has not Bloomberg on it you",
      "tokens": [
        51108,
        19060,
        8193,
        570,
        498,
        291,
        528,
        281,
        764,
        341,
        19060,
        365,
        257,
        3820,
        300,
        575,
        406,
        40363,
        322,
        309,
        291,
        51460
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05818402489950491,
      "compression_ratio": 1.7477477477477477,
      "no_speech_prob": 0.02589164860546589
    },
    {
      "id": 157,
      "seek": 181216,
      "start": 1834.0800000000002,
      "end": 1839.68,
      "text": " might lose some data because here in this sheet you actually have Bloomberg functions and those",
      "tokens": [
        51460,
        1062,
        3624,
        512,
        1412,
        570,
        510,
        294,
        341,
        8193,
        291,
        767,
        362,
        40363,
        6828,
        293,
        729,
        51740
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05818402489950491,
      "compression_ratio": 1.7477477477477477,
      "no_speech_prob": 0.02589164860546589
    },
    {
      "id": 158,
      "seek": 183968,
      "start": 1839.68,
      "end": 1846.24,
      "text": " are actually only running if you are on a computer that has Bloomberg so make sure to copy and paste",
      "tokens": [
        50364,
        366,
        767,
        787,
        2614,
        498,
        291,
        366,
        322,
        257,
        3820,
        300,
        575,
        40363,
        370,
        652,
        988,
        281,
        5055,
        293,
        9163,
        50692
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06397741181509835,
      "compression_ratio": 1.7882882882882882,
      "no_speech_prob": 0.00258917105384171
    },
    {
      "id": 159,
      "seek": 183968,
      "start": 1846.24,
      "end": 1853.68,
      "text": " the values in your sheets and with this index you can now further analyze your stock universe you have",
      "tokens": [
        50692,
        264,
        4190,
        294,
        428,
        15421,
        293,
        365,
        341,
        8186,
        291,
        393,
        586,
        3052,
        12477,
        428,
        4127,
        6445,
        291,
        362,
        51064
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06397741181509835,
      "compression_ratio": 1.7882882882882882,
      "no_speech_prob": 0.00258917105384171
    },
    {
      "id": 160,
      "seek": 183968,
      "start": 1853.68,
      "end": 1860.4,
      "text": " all the constituents from up here those are all the Bloomberg constituents and with that you can",
      "tokens": [
        51064,
        439,
        264,
        30847,
        490,
        493,
        510,
        729,
        366,
        439,
        264,
        40363,
        30847,
        293,
        365,
        300,
        291,
        393,
        51400
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06397741181509835,
      "compression_ratio": 1.7882882882882882,
      "no_speech_prob": 0.00258917105384171
    },
    {
      "id": 161,
      "seek": 183968,
      "start": 1860.4,
      "end": 1867.44,
      "text": " now start your analysis with the historical data on the specific index which was in our case the",
      "tokens": [
        51400,
        586,
        722,
        428,
        5215,
        365,
        264,
        8584,
        1412,
        322,
        264,
        2685,
        8186,
        597,
        390,
        294,
        527,
        1389,
        264,
        51752
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06397741181509835,
      "compression_ratio": 1.7882882882882882,
      "no_speech_prob": 0.00258917105384171
    },
    {
      "id": 162,
      "seek": 186744,
      "start": 1867.44,
      "end": 1873.2,
      "text": " Dow Jones Industrial Average. If you are still watching the video I really appreciate a like",
      "tokens": [
        50364,
        20947,
        10512,
        32059,
        316,
        3623,
        13,
        759,
        291,
        366,
        920,
        1976,
        264,
        960,
        286,
        534,
        4449,
        257,
        411,
        50652
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08659515380859376,
      "compression_ratio": 1.648068669527897,
      "no_speech_prob": 0.0032659044954925776
    },
    {
      "id": 163,
      "seek": 186744,
      "start": 1873.2,
      "end": 1880.0,
      "text": " and also a comment that helps a lot for my youtube channel so I hope you got a lot of value out of",
      "tokens": [
        50652,
        293,
        611,
        257,
        2871,
        300,
        3665,
        257,
        688,
        337,
        452,
        12487,
        2269,
        370,
        286,
        1454,
        291,
        658,
        257,
        688,
        295,
        2158,
        484,
        295,
        50992
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08659515380859376,
      "compression_ratio": 1.648068669527897,
      "no_speech_prob": 0.0032659044954925776
    },
    {
      "id": 164,
      "seek": 186744,
      "start": 1880.0,
      "end": 1886.56,
      "text": " this tutorial I used this technique for my master of thesis and without this technique I wouldn't",
      "tokens": [
        50992,
        341,
        7073,
        286,
        1143,
        341,
        6532,
        337,
        452,
        4505,
        295,
        22288,
        293,
        1553,
        341,
        6532,
        286,
        2759,
        380,
        51320
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08659515380859376,
      "compression_ratio": 1.648068669527897,
      "no_speech_prob": 0.0032659044954925776
    },
    {
      "id": 165,
      "seek": 186744,
      "start": 1886.56,
      "end": 1892.96,
      "text": " have done a historical data analysis so thanks for your comments your likes and also subscribe",
      "tokens": [
        51320,
        362,
        1096,
        257,
        8584,
        1412,
        5215,
        370,
        3231,
        337,
        428,
        3053,
        428,
        5902,
        293,
        611,
        3022,
        51640
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08659515380859376,
      "compression_ratio": 1.648068669527897,
      "no_speech_prob": 0.0032659044954925776
    },
    {
      "id": 166,
      "seek": 189296,
      "start": 1892.96,
      "end": 1900.72,
      "text": " for more useful python and Bloomberg tutorials thanks a lot and see you next time",
      "tokens": [
        50364,
        337,
        544,
        4420,
        38797,
        293,
        40363,
        17616,
        3231,
        257,
        688,
        293,
        536,
        291,
        958,
        565,
        50752
      ],
      "temperature": 0.0,
      "avg_logprob": -0.31973539458380806,
      "compression_ratio": 1.0945945945945945,
      "no_speech_prob": 0.032955948263406754
    }
  ],
  "processing_metadata": {
    "processed_at": "2025-06-26T02:17:34.845762",
    "whisper_model": "small",
    "personality_detected": "bloomy",
    "domain_focus": "finance_excel"
  },
  "source_metadata": {
    "url": "https://www.youtube.com/watch?v=TnQuWrcDLzc",
    "title": "Bloomberg Terminal Basics",
    "category": "Bloomberg Terminal",
    "difficulty": "beginner",
    "key_topics": [
      "Bloomberg",
      "terminal",
      "basics",
      "navigation"
    ],
    "priority": "high"
  }
}