{
  "video_id": "TGGEkpEymGs",
  "video_url": "https://www.youtube.com/watch?v=TGGEkpEymGs",
  "video_info": {
    "title": "How to use the Bloomberg Query Language (BQL) Builder for panel data in Excel",
    "uploader": "ExplainHowToSimply",
    "channel": "ExplainHowToSimply",
    "duration": 101,
    "upload_date": "20210906",
    "view_count": 2811,
    "description": "This short tutorial explains how to simply use the Bloomberg Query Language (BQL) Builder in Excel to efficiently retrieve and download financial panel data (multiple time series data) from the Bloomberg Terminal directly in Excel. If you know how to deal with the BQL Builder, it is straightforward to efficiently get your financial data.",
    "tags": [
      "Bloomberg Tutorial",
      "Excel Bloomberg Add-in",
      "Bloomberg Terminal",
      "Historical Financial Data",
      "short financial data tutorial",
      "Bloomberg in Excel",
      "Historical stock last prices",
      "Bloomberg time series data download",
      "download financial data from Bloomberg",
      "Excel spreadsheet with financial stock price data",
      "Short tutorial on Bloomberg",
      "Thesis in Finance",
      "Quantitative Research in Finance",
      "Bloomberg financial data",
      "Bloomberg Query Language (BQL) Builder",
      "BQL Builder",
      "Financial panel data"
    ]
  },
  "personality": "bloomy",
  "domain": "finance_excel",
  "expertise_areas": [
    "bloomberg",
    "excel",
    "finance",
    "data analysis",
    "trading",
    "financial modeling"
  ],
  "language": "en",
  "text": " Hi everyone, in this short video I explain how to simply use the Bloomberg query language builder in Excel to retrieve panel data. For that you need to be locked into the Bloomberg terminal and you also need the Bloomberg add-in in Excel. And in this example I want to get the last prices of all the S&P 500 constituents for the last month in daily data. So for that we select members of the S&P 500 index, so we have all the 500 members in there and what we want is the last price for the last 30 days and we can customize that further here and if we want to exclude the weekends with no price data we can just remove the rows with NA values and we can save, look at the preview, how it looks like and we can insert and run. Okay so now here you see the data so we have all the 500 constituents of the S&P 500 here and we have it daily for the last month. If you liked the video please leave a like and subscribe for more content, thanks a lot and have a nice day.",
  "segments": [
    {
      "id": 0,
      "seek": 0,
      "start": 0.0,
      "end": 10.4,
      "text": " Hi everyone, in this short video I explain how to simply use the Bloomberg query language",
      "tokens": [
        50364,
        2421,
        1518,
        11,
        294,
        341,
        2099,
        960,
        286,
        2903,
        577,
        281,
        2935,
        764,
        264,
        40363,
        14581,
        2856,
        50884
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1791051667312096,
      "compression_ratio": 1.5256410256410255,
      "no_speech_prob": 0.07784045487642288
    },
    {
      "id": 1,
      "seek": 0,
      "start": 10.4,
      "end": 14.76,
      "text": " builder in Excel to retrieve panel data.",
      "tokens": [
        50884,
        27377,
        294,
        19060,
        281,
        30254,
        4831,
        1412,
        13,
        51102
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1791051667312096,
      "compression_ratio": 1.5256410256410255,
      "no_speech_prob": 0.07784045487642288
    },
    {
      "id": 2,
      "seek": 0,
      "start": 14.76,
      "end": 21.96,
      "text": " For that you need to be locked into the Bloomberg terminal and you also need the Bloomberg add-in",
      "tokens": [
        51102,
        1171,
        300,
        291,
        643,
        281,
        312,
        9376,
        666,
        264,
        40363,
        14709,
        293,
        291,
        611,
        643,
        264,
        40363,
        909,
        12,
        259,
        51462
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1791051667312096,
      "compression_ratio": 1.5256410256410255,
      "no_speech_prob": 0.07784045487642288
    },
    {
      "id": 3,
      "seek": 0,
      "start": 21.96,
      "end": 23.48,
      "text": " in Excel.",
      "tokens": [
        51462,
        294,
        19060,
        13,
        51538
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1791051667312096,
      "compression_ratio": 1.5256410256410255,
      "no_speech_prob": 0.07784045487642288
    },
    {
      "id": 4,
      "seek": 2348,
      "start": 23.48,
      "end": 31.880000000000003,
      "text": " And in this example I want to get the last prices of all the S&P 500 constituents for",
      "tokens": [
        50364,
        400,
        294,
        341,
        1365,
        286,
        528,
        281,
        483,
        264,
        1036,
        7901,
        295,
        439,
        264,
        318,
        5,
        47,
        5923,
        30847,
        337,
        50784
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12991774493250355,
      "compression_ratio": 1.4577464788732395,
      "no_speech_prob": 0.08878998458385468
    },
    {
      "id": 5,
      "seek": 2348,
      "start": 31.880000000000003,
      "end": 35.96,
      "text": " the last month in daily data.",
      "tokens": [
        50784,
        264,
        1036,
        1618,
        294,
        5212,
        1412,
        13,
        50988
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12991774493250355,
      "compression_ratio": 1.4577464788732395,
      "no_speech_prob": 0.08878998458385468
    },
    {
      "id": 6,
      "seek": 2348,
      "start": 35.96,
      "end": 47.0,
      "text": " So for that we select members of the S&P 500 index, so we have all the 500 members in there",
      "tokens": [
        50988,
        407,
        337,
        300,
        321,
        3048,
        2679,
        295,
        264,
        318,
        5,
        47,
        5923,
        8186,
        11,
        370,
        321,
        362,
        439,
        264,
        5923,
        2679,
        294,
        456,
        51540
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12991774493250355,
      "compression_ratio": 1.4577464788732395,
      "no_speech_prob": 0.08878998458385468
    },
    {
      "id": 7,
      "seek": 4700,
      "start": 47.0,
      "end": 56.4,
      "text": " and what we want is the last price for the last 30 days and we can customize that further",
      "tokens": [
        50364,
        293,
        437,
        321,
        528,
        307,
        264,
        1036,
        3218,
        337,
        264,
        1036,
        2217,
        1708,
        293,
        321,
        393,
        19734,
        300,
        3052,
        50834
      ],
      "temperature": 0.0,
      "avg_logprob": -0.19209110736846924,
      "compression_ratio": 1.6257309941520468,
      "no_speech_prob": 0.27500295639038086
    },
    {
      "id": 8,
      "seek": 4700,
      "start": 56.4,
      "end": 65.0,
      "text": " here and if we want to exclude the weekends with no price data we can just remove the",
      "tokens": [
        50834,
        510,
        293,
        498,
        321,
        528,
        281,
        33536,
        264,
        23595,
        365,
        572,
        3218,
        1412,
        321,
        393,
        445,
        4159,
        264,
        51264
      ],
      "temperature": 0.0,
      "avg_logprob": -0.19209110736846924,
      "compression_ratio": 1.6257309941520468,
      "no_speech_prob": 0.27500295639038086
    },
    {
      "id": 9,
      "seek": 4700,
      "start": 65.0,
      "end": 74.28,
      "text": " rows with NA values and we can save, look at the preview, how it looks like and we can",
      "tokens": [
        51264,
        13241,
        365,
        16585,
        4190,
        293,
        321,
        393,
        3155,
        11,
        574,
        412,
        264,
        14281,
        11,
        577,
        309,
        1542,
        411,
        293,
        321,
        393,
        51728
      ],
      "temperature": 0.0,
      "avg_logprob": -0.19209110736846924,
      "compression_ratio": 1.6257309941520468,
      "no_speech_prob": 0.27500295639038086
    },
    {
      "id": 10,
      "seek": 4700,
      "start": 74.28,
      "end": 76.28,
      "text": " insert and run.",
      "tokens": [
        51728,
        8969,
        293,
        1190,
        13,
        51828
      ],
      "temperature": 0.0,
      "avg_logprob": -0.19209110736846924,
      "compression_ratio": 1.6257309941520468,
      "no_speech_prob": 0.27500295639038086
    },
    {
      "id": 11,
      "seek": 7628,
      "start": 76.68,
      "end": 87.24000000000001,
      "text": " Okay so now here you see the data so we have all the 500 constituents of the S&P 500 here",
      "tokens": [
        50384,
        1033,
        370,
        586,
        510,
        291,
        536,
        264,
        1412,
        370,
        321,
        362,
        439,
        264,
        5923,
        30847,
        295,
        264,
        318,
        5,
        47,
        5923,
        510,
        50912
      ],
      "temperature": 0.0,
      "avg_logprob": -0.20089862530048078,
      "compression_ratio": 1.5126582278481013,
      "no_speech_prob": 0.03300192579627037
    },
    {
      "id": 12,
      "seek": 7628,
      "start": 87.24000000000001,
      "end": 92.68,
      "text": " and we have it daily for the last month.",
      "tokens": [
        50912,
        293,
        321,
        362,
        309,
        5212,
        337,
        264,
        1036,
        1618,
        13,
        51184
      ],
      "temperature": 0.0,
      "avg_logprob": -0.20089862530048078,
      "compression_ratio": 1.5126582278481013,
      "no_speech_prob": 0.03300192579627037
    },
    {
      "id": 13,
      "seek": 7628,
      "start": 92.68,
      "end": 98.92,
      "text": " If you liked the video please leave a like and subscribe for more content, thanks a lot",
      "tokens": [
        51184,
        759,
        291,
        4501,
        264,
        960,
        1767,
        1856,
        257,
        411,
        293,
        3022,
        337,
        544,
        2701,
        11,
        3231,
        257,
        688,
        51496
      ],
      "temperature": 0.0,
      "avg_logprob": -0.20089862530048078,
      "compression_ratio": 1.5126582278481013,
      "no_speech_prob": 0.03300192579627037
    },
    {
      "id": 14,
      "seek": 7628,
      "start": 98.92,
      "end": 100.2,
      "text": " and have a nice day.",
      "tokens": [
        51496,
        293,
        362,
        257,
        1481,
        786,
        13,
        51560
      ],
      "temperature": 0.0,
      "avg_logprob": -0.20089862530048078,
      "compression_ratio": 1.5126582278481013,
      "no_speech_prob": 0.03300192579627037
    }
  ],
  "processing_metadata": {
    "processed_at": "2025-06-26T02:44:24.505215",
    "whisper_model": "small",
    "personality_detected": "bloomy",
    "domain_focus": "finance_excel"
  },
  "source_metadata": {
    "url": "https://www.youtube.com/watch?v=TGGEkpEymGs",
    "title": "Excel Power Pivot",
    "category": "Excel Advanced",
    "difficulty": "advanced",
    "key_topics": [
      "Excel",
      "Power Pivot",
      "data modeling",
      "analysis"
    ],
    "priority": "medium"
  }
}